{"contractTypes":{"DebtAllocator":{"abi":[{"inputs":[{"internalType":"address","name":"_cairoVerifier","type":"address"},{"internalType":"bytes32","name":"_cairoProgramHash","type":"bytes32"}],"stateMutability":"payable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"newCairoProgramHash","type":"bytes32"}],"name":"NewCairoProgramHash","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"newCairoVerifier","type":"address"}],"name":"NewCairoVerifier","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256[]","name":"dataStrategies","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"calculation","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"condition","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"targetAllocations","type":"uint256[]"}],"name":"NewSnapshot","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newApy","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"newTargetAllocation","type":"uint256[]"},{"indexed":false,"internalType":"address","name":"proposer","type":"address"},{"indexed":false,"internalType":"uint256","name":"proposerPerformance","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"NewSolution","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newStalePeriod","type":"uint256"}],"name":"NewStalePeriod","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newStaleSnapshotPeriod","type":"uint256"}],"name":"NewStaleSnapshotPeriod","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"Strategies","type":"address[]"},{"indexed":false,"internalType":"uint256[]","name":"StrategiesCallLen","type":"uint256[]"},{"indexed":false,"internalType":"address[]","name":"Contracts","type":"address[]"},{"indexed":false,"internalType":"bytes4[]","name":"Checkdata","type":"bytes4[]"},{"indexed":false,"internalType":"uint256[]","name":"Offset","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"CalculationsLen","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"Calculations","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"ConditionsLen","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"Conditions","type":"uint256[]"}],"name":"StrategyAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"Strategies","type":"address[]"},{"indexed":false,"internalType":"uint256[]","name":"StrategiesCallLen","type":"uint256[]"},{"indexed":false,"internalType":"address[]","name":"Contracts","type":"address[]"},{"indexed":false,"internalType":"bytes4[]","name":"Checkdata","type":"bytes4[]"},{"indexed":false,"internalType":"uint256[]","name":"Offset","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"CalculationsLen","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"Calculations","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"ConditionsLen","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"Conditions","type":"uint256[]"}],"name":"StrategyRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"Strategies","type":"address[]"},{"indexed":false,"internalType":"uint256[]","name":"StrategiesCallLen","type":"uint256[]"},{"indexed":false,"internalType":"address[]","name":"Contracts","type":"address[]"},{"indexed":false,"internalType":"bytes4[]","name":"Checkdata","type":"bytes4[]"},{"indexed":false,"internalType":"uint256[]","name":"Offset","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"CalculationsLen","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"Calculations","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"ConditionsLen","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"Conditions","type":"uint256[]"}],"name":"StrategyUpdated","type":"event"},{"inputs":[{"components":[{"internalType":"address[]","name":"addresses","type":"address[]"},{"internalType":"uint256[]","name":"callLen","type":"uint256[]"},{"internalType":"address[]","name":"contracts","type":"address[]"},{"internalType":"bytes[]","name":"checkdata","type":"bytes[]"},{"internalType":"uint256[]","name":"offset","type":"uint256[]"},{"internalType":"uint256[]","name":"calculationsLen","type":"uint256[]"},{"internalType":"uint256[]","name":"calculations","type":"uint256[]"},{"internalType":"uint256[]","name":"conditionsLen","type":"uint256[]"},{"internalType":"uint256[]","name":"conditions","type":"uint256[]"}],"internalType":"struct DebtAllocator.PackedStrategies","name":"_packedStrategies","type":"tuple"},{"internalType":"address","name":"_newStrategy","type":"address"},{"components":[{"internalType":"uint256","name":"callLen","type":"uint256"},{"internalType":"address[]","name":"contracts","type":"address[]"},{"internalType":"bytes[]","name":"checkdata","type":"bytes[]"},{"internalType":"uint256[]","name":"offset","type":"uint256[]"},{"internalType":"uint256","name":"calculationsLen","type":"uint256"},{"internalType":"uint256[]","name":"calculations","type":"uint256[]"},{"internalType":"uint256","name":"conditionsLen","type":"uint256"},{"internalType":"uint256[]","name":"conditions","type":"uint256[]"}],"internalType":"struct DebtAllocator.StrategyParam","name":"_newStrategyParam","type":"tuple"}],"name":"addStrategy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"cairoProgramHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cairoVerifier","outputs":[{"internalType":"contract ICairoVerifier","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"claimRewards","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"contracts","type":"address[]"},{"internalType":"bytes[]","name":"checkdata","type":"bytes[]"},{"internalType":"uint256[]","name":"offset","type":"uint256[]"}],"name":"getStrategiesData","outputs":[{"internalType":"uint256[]","name":"dataStrategies","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"inputHash","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastUpdate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minimumApyIncreaseForNewSolution","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"programOutput","type":"uint256[]"}],"name":"parseProgramOutput","outputs":[{"internalType":"uint256","name":"_inputHash","type":"uint256"},{"internalType":"uint256[]","name":"_current_target_allocation","type":"uint256[]"},{"internalType":"uint256[]","name":"_new_target_allocation","type":"uint256[]"},{"internalType":"uint256","name":"_current_solution","type":"uint256"},{"internalType":"uint256","name":"_new_solution","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"proposer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proposerPerformance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address[]","name":"addresses","type":"address[]"},{"internalType":"uint256[]","name":"callLen","type":"uint256[]"},{"internalType":"address[]","name":"contracts","type":"address[]"},{"internalType":"bytes[]","name":"checkdata","type":"bytes[]"},{"internalType":"uint256[]","name":"offset","type":"uint256[]"},{"internalType":"uint256[]","name":"calculationsLen","type":"uint256[]"},{"internalType":"uint256[]","name":"calculations","type":"uint256[]"},{"internalType":"uint256[]","name":"conditionsLen","type":"uint256[]"},{"internalType":"uint256[]","name":"conditions","type":"uint256[]"}],"internalType":"struct DebtAllocator.PackedStrategies","name":"_packedStrategies","type":"tuple"},{"internalType":"uint256","name":"indexStrategyToRemove","type":"uint256"}],"name":"removeStrategy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardsPayer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardsPerSec","outputs":[{"internalType":"uint216","name":"","type":"uint216"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardsStreamer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address[]","name":"addresses","type":"address[]"},{"internalType":"uint256[]","name":"callLen","type":"uint256[]"},{"internalType":"address[]","name":"contracts","type":"address[]"},{"internalType":"bytes[]","name":"checkdata","type":"bytes[]"},{"internalType":"uint256[]","name":"offset","type":"uint256[]"},{"internalType":"uint256[]","name":"calculationsLen","type":"uint256[]"},{"internalType":"uint256[]","name":"calculations","type":"uint256[]"},{"internalType":"uint256[]","name":"conditionsLen","type":"uint256[]"},{"internalType":"uint256[]","name":"conditions","type":"uint256[]"}],"internalType":"struct DebtAllocator.PackedStrategies","name":"_packedStrategies","type":"tuple"}],"name":"saveSnapshot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"snapshotTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stalePeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"staleSnapshotPeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"strategiesHash","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"targetAllocation","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_cairoProgramHash","type":"bytes32"}],"name":"updateCairoProgramHash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_cairoVerifier","type":"address"}],"name":"updateCairoVerifier","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_rewardsPayer","type":"address"},{"internalType":"address","name":"_rewardsStreamer","type":"address"},{"internalType":"uint216","name":"_rewardsPerSec","type":"uint216"}],"name":"updateRewardsConfig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_stalePeriod","type":"uint256"}],"name":"updateStalePeriod","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_staleSnapshotPeriod","type":"uint256"}],"name":"updateStaleSnapshotPeriod","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address[]","name":"addresses","type":"address[]"},{"internalType":"uint256[]","name":"callLen","type":"uint256[]"},{"internalType":"address[]","name":"contracts","type":"address[]"},{"internalType":"bytes[]","name":"checkdata","type":"bytes[]"},{"internalType":"uint256[]","name":"offset","type":"uint256[]"},{"internalType":"uint256[]","name":"calculationsLen","type":"uint256[]"},{"internalType":"uint256[]","name":"calculations","type":"uint256[]"},{"internalType":"uint256[]","name":"conditionsLen","type":"uint256[]"},{"internalType":"uint256[]","name":"conditions","type":"uint256[]"}],"internalType":"struct DebtAllocator.PackedStrategies","name":"_packedStrategies","type":"tuple"},{"internalType":"uint256","name":"indexStrategyToUpdate","type":"uint256"},{"components":[{"internalType":"uint256","name":"callLen","type":"uint256"},{"internalType":"address[]","name":"contracts","type":"address[]"},{"internalType":"bytes[]","name":"checkdata","type":"bytes[]"},{"internalType":"uint256[]","name":"offset","type":"uint256[]"},{"internalType":"uint256","name":"calculationsLen","type":"uint256"},{"internalType":"uint256[]","name":"calculations","type":"uint256[]"},{"internalType":"uint256","name":"conditionsLen","type":"uint256"},{"internalType":"uint256[]","name":"conditions","type":"uint256[]"}],"internalType":"struct DebtAllocator.StrategyParam","name":"_newStrategyParam","type":"tuple"}],"name":"updateStrategy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"programOutput","type":"uint256[]"}],"name":"verifySolution","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}],"contractName":"DebtAllocator","deploymentBytecode":{"bytecode":"0x60806040819052670de0b6b3a7640000600155600280546001600160a01b0319169055600060035562015180600b819055600c5569152d02c7e14af680000060105562005838388190039081908339810160408190526200006091620000c3565b6200006b3362000073565b5050620000ff565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060408385031215620000d757600080fd5b82516001600160a01b0381168114620000ef57600080fd5b6020939093015192949293505050565b615729806200010f6000396000f3fe608060405234801561001057600080fd5b50600436106101e45760003560e01c806380609a6c1161010f578063c0463711116100a2578063d0d202b311610071578063d0d202b3146103e5578063eaf3a188146103f8578063f2fde38b14610418578063fd94c6801461042b57600080fd5b8063c0463711146103b7578063c1a2e32b146103c0578063c671dbd9146103d3578063cfce5dd9146103dc57600080fd5b8063a8e4fb90116100de578063a8e4fb9014610375578063ad957ac314610388578063b03780a11461039b578063b21f147f146103ae57600080fd5b806380609a6c1461033f5780638da5cb5b14610352578063a1221c6f14610363578063a5b36a361461036c57600080fd5b806327756afd116101875780635dbc7af4116101565780635dbc7af4146102f7578063644900a61461031b578063673247851461032e578063715018a61461033757600080fd5b806327756afd146102b2578063372500ab146102d3578063374e8334146102db578063408378bd146102e457600080fd5b80630e076ac3116101c35780630e076ac31461024e5780630e0cdd2e14610279578063126662d31461028c5780631ebe1d681461029f57600080fd5b8062893452146101e9578063030e886914610219578063078e07d71461022e575b600080fd5b600f546101fc906001600160d81b031681565b6040516001600160d81b0390911681526020015b60405180910390f35b61022c610227366004614ef1565b61043e565b005b61024161023c366004614f68565b6109ff565b6040516102109190615020565b600e54610261906001600160a01b031681565b6040516001600160a01b039091168152602001610210565b61022c61028736600461503a565b610b45565b61022c61029a366004615053565b610b89565b61022c6102ad366004615097565b611968565b6102c56102c036600461503a565b611adc565b604051908152602001610210565b61022c611afd565b6102c560105481565b600d54610261906001600160a01b031681565b61030a6103053660046150ee565b611b4f565b604051610210959493929190615122565b61022c61032936600461503a565b611dab565b6102c560035481565b61022c611de8565b61022c61034d366004615162565b611dfa565b6000546001600160a01b0316610261565b6102c5600b5481565b6102c5600c5481565b600554610261906001600160a01b031681565b6102c56103963660046150ee565b611f9f565b600254610261906001600160a01b031681565b6102c560095481565b6102c560075481565b61022c6103ce36600461503a565b612292565b6102c560065481565b6102c560085481565b61022c6103f3366004615196565b6122cf565b6102c561040636600461503a565b600a6020526000908152604090205481565b61022c6104263660046151eb565b613af6565b61022c6104393660046151eb565b613b6f565b610446613bc5565b60006104558460600151613c1f565b90506008546000146104705761046b8482613cd8565b6104b2565b835151156104b25760405162461bcd60e51b815260206004820152600a60248201526946495253545f4441544160b01b60448201526064015b60405180910390fd5b60005b84515181101561054157836001600160a01b0316856000015182815181106104df576104df615208565b60200260200101516001600160a01b03160361052f5760405162461bcd60e51b815260206004820152600f60248201526e53545241544547595f45584953545360881b60448201526064016104a9565b8061053981615234565b9150506104b5565b5061054b82613d69565b83515160009061055c90600161524d565b6001600160401b0381111561057357610573614a05565b60405190808252806020026020018201604052801561059c578160200160208202803683370190505b50905060005b8551518110156106045785518051829081106105c0576105c0615208565b60200260200101518282815181106105da576105da615208565b6001600160a01b0390921660209283029190910190910152806105fc81615234565b9150506105a2565b5083818660000151518151811061061d5761061d615208565b6001600160a01b03909216602092830291909101820152850151835160009161064591613eeb565b90506000846000015187604001515161065e919061524d565b6001600160401b0381111561067557610675614a05565b60405190808252806020026020018201604052801561069e578160200160208202803683370190505b50905060005b87604001515181101561070b57876040015181815181106106c7576106c7615208565b60200260200101518282815181106106e1576106e1615208565b6001600160a01b03909216602092830291909101909101528061070381615234565b9150506106a4565b5060005b8551811015610782578560200151818151811061072e5761072e615208565b60200260200101518289604001515183610748919061524d565b8151811061075857610758615208565b6001600160a01b03909216602092830291909101909101528061077a81615234565b91505061070f565b508451606088015151610795919061524d565b6001600160401b038111156107ac576107ac614a05565b6040519080825280602002602001820160405280156107d5578160200160208202803683370190505b50935060005b87606001515181101561084c57876060015181815181106107fe576107fe615208565b602002602001015161080f90615260565b85828151811061082157610821615208565b6001600160e01b0319909216602092830291909101909101528061084481615234565b9150506107db565b5060005b85518110156108cd578560400151818151811061086f5761086f615208565b602002602001015161088090615260565b8589606001515183610892919061524d565b815181106108a2576108a2615208565b6001600160e01b031990921660209283029190910190910152806108c581615234565b915050610850565b5060006108e288608001518760600151613fba565b905060006108f88960a001518860800151613eeb565b9050600061090e8a60c001518960a00151613fba565b905060006109248b60e001518a60c00151613eeb565b9050600061093b8c61010001518b60e00151613fba565b90508787878b888888888860405160200161095e999897969594939291906152ed565b60408051601f198184030181529082905280516020909101206008556004805460018101825560009182527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01557f8e53c9a718e34c6a61b1c74a1c66c621f44ef9e718867f22079ac7a600042ee1906109e9908a908a908a908e908b908b908b908b908b906153b3565b60405180910390a1505050505050505050505050565b6060600084516001600160401b03811115610a1c57610a1c614a05565b604051908082528060200260200182016040528015610a45578160200160208202803683370190505b50905060005b8551811015610b3c576000868281518110610a6857610a68615208565b60200260200101516001600160a01b0316868381518110610a8b57610a8b615208565b6020026020010151604051610aa091906154ba565b6000604051808303816000865af19150503d8060008114610add576040519150601f19603f3d011682016040523d82523d6000602084013e610ae2565b606091505b50915050610b0981868481518110610afc57610afc615208565b60200260200101516140cd565b60001c838381518110610b1e57610b1e615208565b60209081029190910101525080610b3481615234565b915050610a4b565b50949350505050565b610b4d613bc5565b60038190556040518181527ff1ec1146b34ac057e939c68e0d1b14850406891906b28277b3bb7021740a9c4a906020015b60405180910390a150565b610b91613bc5565b600854600003610bb35760405162461bcd60e51b81526004016104a9906154d6565b6000610bc28360600151613c1f565b9050610bce8382613cd8565b8251518210610bdc57600080fd5b60006001846020015151610bf091906154fd565b6001600160401b03811115610c0757610c07614a05565b604051908082528060200260200182016040528015610c30578160200160208202803683370190505b509050600060018560a0015151610c4791906154fd565b6001600160401b03811115610c5e57610c5e614a05565b604051908082528060200260200182016040528015610c87578160200160208202803683370190505b509050600060018660e0015151610c9e91906154fd565b6001600160401b03811115610cb557610cb5614a05565b604051908082528060200260200182016040528015610cde578160200160208202803683370190505b509050600086602001518681518110610cf957610cf9615208565b6020026020010151876040015151610d1191906154fd565b6001600160401b03811115610d2857610d28614a05565b604051908082528060200260200182016040528015610d51578160200160208202803683370190505b50905086602001518681518110610d6a57610d6a615208565b6020026020010151876060015151610d8291906154fd565b6001600160401b03811115610d9957610d99614a05565b604051908082528060200260200182016040528015610dc2578160200160208202803683370190505b509450600087602001518781518110610ddd57610ddd615208565b6020026020010151886080015151610df591906154fd565b6001600160401b03811115610e0c57610e0c614a05565b604051908082528060200260200182016040528015610e35578160200160208202803683370190505b50905060008860a001518881518110610e5057610e50615208565b60200260200101518960c0015151610e6891906154fd565b6001600160401b03811115610e7f57610e7f614a05565b604051908082528060200260200182016040528015610ea8578160200160208202803683370190505b50905060008960e001518981518110610ec357610ec3615208565b60200260200101518a610100015151610edc91906154fd565b6001600160401b03811115610ef357610ef3614a05565b604051908082528060200260200182016040528015610f1c578160200160208202803683370190505b5090508860005b81811015610f78578b602001518181518110610f4157610f41615208565b6020026020010151898281518110610f5b57610f5b615208565b602090810291909101015280610f7081615234565b915050610f23565b5060005b610f8782600161524d565b8c5151610f9491906154fd565b8110156110085760208c015181610fac84600161524d565b610fb6919061524d565b81518110610fc657610fc6615208565b6020026020010151898284610fdb919061524d565b81518110610feb57610feb615208565b60209081029190910101528061100081615234565b915050610f7c565b5060005b81811015611061578b60a00151818151811061102a5761102a615208565b602002602001015188828151811061104457611044615208565b60209081029190910101528061105981615234565b91505061100c565b5060005b61107082600161524d565b8c515161107d91906154fd565b8110156110f15760a08c01518161109584600161524d565b61109f919061524d565b815181106110af576110af615208565b60200260200101518882846110c4919061524d565b815181106110d4576110d4615208565b6020908102919091010152806110e981615234565b915050611065565b5060005b8181101561114a578b60e00151818151811061111357611113615208565b602002602001015187828151811061112d5761112d615208565b60209081029190910101528061114281615234565b9150506110f5565b5060005b61115982600161524d565b8c515161116691906154fd565b8110156111da5760e08c01518161117e84600161524d565b611188919061524d565b8151811061119857611198615208565b60200260200101518782846111ad919061524d565b815181106111bd576111bd615208565b6020908102919091010152806111d281615234565b91505061114e565b50600080915060005b8c5151811015611235578b81036111f8578192505b8c60200151818151811061120e5761120e615208565b602002602001015182611221919061524d565b91508061122d81615234565b9150506111e3565b5060005b8281101561129b578c60400151818151811061125757611257615208565b602002602001015187828151811061127157611271615208565b6001600160a01b03909216602092830291909101909101528061129381615234565b915050611239565b5060005b8c602001518c815181106112b5576112b5615208565b6020026020010151836112c8919061524d565b6112d290836154fd565b811015611371578c60400151818e602001518e815181106112f5576112f5615208565b602002602001015185611308919061524d565b611312919061524d565b8151811061132257611322615208565b6020026020010151878483611337919061524d565b8151811061134757611347615208565b6001600160a01b03909216602092830291909101909101528061136981615234565b91505061129f565b5060005b828110156113e1578c60600151818151811061139357611393615208565b60200260200101516113a490615260565b8b82815181106113b6576113b6615208565b6001600160e01b031990921660209283029190910190910152806113d981615234565b915050611375565b5060005b8c602001518c815181106113fb576113fb615208565b60200260200101518361140e919061524d565b61141890836154fd565b8110156114bf578c60600151818e602001518e8151811061143b5761143b615208565b60200260200101518561144e919061524d565b611458919061524d565b8151811061146857611468615208565b602002602001015161147990615260565b8b611484858461524d565b8151811061149457611494615208565b6001600160e01b031990921660209283029190910190910152806114b781615234565b9150506113e5565b5060005b82811015611518578c6080015181815181106114e1576114e1615208565b60200260200101518682815181106114fb576114fb615208565b60209081029190910101528061151081615234565b9150506114c3565b5060005b8c602001518c8151811061153257611532615208565b602002602001015183611545919061524d565b61154f90836154fd565b8110156115e1578c60800151818e602001518e8151811061157257611572615208565b602002602001015185611585919061524d565b61158f919061524d565b8151811061159f5761159f615208565b60200260200101518684836115b4919061524d565b815181106115c4576115c4615208565b6020908102919091010152806115d981615234565b91505061151c565b50600090506000915060005b8c515181101561163f578b8103611602578192505b8c60a00151818151811061161857611618615208565b60200260200101518261162b919061524d565b91508061163781615234565b9150506115ed565b5060005b82811015611698578c60c00151818151811061166157611661615208565b602002602001015185828151811061167b5761167b615208565b60209081029190910101528061169081615234565b915050611643565b5060005b8c60a001518c815181106116b2576116b2615208565b6020026020010151836116c5919061524d565b6116cf90836154fd565b811015611761578c60c00151818e60a001518e815181106116f2576116f2615208565b602002602001015185611705919061524d565b61170f919061524d565b8151811061171f5761171f615208565b6020026020010151858483611734919061524d565b8151811061174457611744615208565b60209081029190910101528061175981615234565b91505061169c565b50600090506000915060005b8c51518110156117bf578b8103611782578192505b8c60e00151818151811061179857611798615208565b6020026020010151826117ab919061524d565b9150806117b781615234565b91505061176d565b5060005b82811015611819578c610100015181815181106117e2576117e2615208565b60200260200101518482815181106117fc576117fc615208565b60209081029190910101528061181181615234565b9150506117c3565b5060005b8c60e001518c8151811061183357611833615208565b602002602001015183611846919061524d565b61185090836154fd565b8110156118e3578c6101000151818e60e001518e8151811061187457611874615208565b602002602001015185611887919061524d565b611891919061524d565b815181106118a1576118a1615208565b60200260200101518484836118b6919061524d565b815181106118c6576118c6615208565b6020908102919091010152806118db81615234565b91505061181d565b508b5160405161190691908b9089908e908a908e908b908f908c906020016152ed565b6040516020818303038152906040528051906020012060001c6008819055507f30bb8971424ac048a04b1a560b5d691478a0bab916cf71a19c08b2c69ab32f2d8c600001518a888d898d8a8e8b6040516109e9999897969594939291906153b3565b611970613bc5565b604051630502c30760e51b81526000906001600160a01b0384169063a05860e0906119a390879030908790600401615510565b602060405180830381865afa1580156119c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e4919061553c565b604051636bc1609560e01b8152600481018290529091506000906001600160a01b03851690636bc1609590602401602060405180830381865afa158015611a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a53919061553c565b11611a895760405162461bcd60e51b815260206004820152600660248201526553545245414d60d01b60448201526064016104a9565b50600d80546001600160a01b03199081166001600160a01b0395861617909155600e80549091169290931691909117909155600f80546001600160d81b0319166001600160d81b03909216919091179055565b60048181548110611aec57600080fd5b600091825260209091200154905081565b6005546001600160a01b03163314611b455760405162461bcd60e51b815260206004820152600b60248201526a1393d517d0531313d5d15160aa1b60448201526064016104a9565b611b4d614134565b565b60006060806000806000608087600081518110611b6e57611b6e615208565b6020026020010151901b905086600181518110611b8d57611b8d615208565b602002602001015181611ba0919061524d565b9050600087600281518110611bb757611bb7615208565b60200260200101516001600160401b03811115611bd657611bd6614a05565b604051908082528060200260200182016040528015611bff578160200160208202803683370190505b509050600088600281518110611c1757611c17615208565b60200260200101516001600160401b03811115611c3657611c36614a05565b604051908082528060200260200182016040528015611c5f578160200160208202803683370190505b50905060005b89600281518110611c7857611c78615208565b6020026020010151811015611d435789611c9382600361524d565b81518110611ca357611ca3615208565b6020026020010151838281518110611cbd57611cbd615208565b602002602001018181525050898a600281518110611cdd57611cdd615208565b6020026020010151826004611cf2919061524d565b611cfc919061524d565b81518110611d0c57611d0c615208565b6020026020010151828281518110611d2657611d26615208565b602090810291909101015280611d3b81615234565b915050611c65565b508282828b60028d51611d5691906154fd565b81518110611d6657611d66615208565b60200260200101518c60018e51611d7d91906154fd565b81518110611d8d57611d8d615208565b60200260200101519750975097509750975050505091939590929450565b611db3613bc5565b600b8190556040518181527fb661c316bad6aba02e92ad9084ba0146824efd8c122d24f668d4c6845cd0b80c90602001610b7e565b611df0613bc5565b611b4d60006143ad565b600854600003611e1c5760405162461bcd60e51b81526004016104a9906154d6565b60008160600151516001600160401b03811115611e3b57611e3b614a05565b604051908082528060200260200182016040528015611e64578160200160208202803683370190505b50905060005b826060015151811015611edb5782606001518181518110611e8d57611e8d615208565b6020026020010151611e9e90615260565b828281518110611eb057611eb0615208565b6001600160e01b03199092166020928302919091019091015280611ed381615234565b915050611e6a565b50611ee68282613cd8565b8151611ef1906143fd565b6000611f0a8360400151846060015185608001516109ff565b9050808360c00151846101000151604051602001611f2a93929190615555565b60408051601f19818403018152828252805160209182012060098190556000908152600a9091522042905560c08401516101008501517f316d5bca887648a73e73b926bab4c3ce4607be522c563cae9ba58f917b319f8692611f92928592909160049061557c565b60405180910390a1505050565b6009546000908152600a6020526040812054600b544290611fc0908361524d565b11611ffe5760405162461bcd60e51b815260206004820152600e60248201526d14d510531157d4d3905414d213d560921b60448201526064016104a9565b600080600080600061200f88611b4f565b9450945094509450945060095485146120535760405162461bcd60e51b81526004016104a99060208082526004908201526309082a6960e31b604082015260600190565b835160045414801561206757508251600454145b6120b35760405162461bcd60e51b815260206004820152601860248201527f5441524745545f414c4c4f434154494f4e5f4c454e475448000000000000000060448201526064016104a9565b81601054826120c291906154fd565b10156120fa5760405162461bcd60e51b81526020600482015260076024820152661513d3d7d0905160ca1b60448201526064016104a9565b60008860405160200161210d91906155fd565b604051602081830303815290604052805190602001209050600060035482604051602001612145929190918252602082015260400190565b60408051808303601f19018152908290528051602090910120600254636a93856760e01b8352600483018290529092506001600160a01b031690636a93856790602401602060405180830381865afa1580156121a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c99190615609565b6122055760405162461bcd60e51b815260206004820152600d60248201526c26a4a9a9a4a723afa82927a7a360991b60448201526064016104a9565b84516122189060049060208801906149a5565b5042600755612225614134565b600580546001600160a01b0319163317905561224184846154fd565b60068190556040517fd5fcaa64c9cd5e658564ea2213a28b82e520ca0b84641401e702c3f6495be2ec9161227d9186918991339190429061562b565b60405180910390a19998505050505050505050565b61229a613bc5565b600c8190556040518181527f6c5816d6599cc31297ca644605cb3d6d8adb2c4bf581eaa2b0827880a5e3b52790602001610b7e565b6122d7613bc5565b6008546000036122f95760405162461bcd60e51b81526004016104a9906154d6565b60008360600151516001600160401b0381111561231857612318614a05565b604051908082528060200260200182016040528015612341578160200160208202803683370190505b50905060005b8460600151518110156123b8578460600151818151811061236a5761236a615208565b602002602001015161237b90615260565b82828151811061238d5761238d615208565b6001600160e01b031990921660209283029190910190910152806123b081615234565b915050612347565b506123c38482613cd8565b83515183106124095760405162461bcd60e51b8152602060048201526012602482015271494e4445585f4f55545f4f465f52414e474560701b60448201526064016104a9565b602082015151825114801561242357506040820151518251145b801561243457506060820151518251145b801561244857508160a00151518260800151145b801561245c57508160e00151518260c00151145b6124945760405162461bcd60e51b815260206004820152600960248201526820a92920acafa622a760b91b60448201526064016104a9565b60005b825181101561258b576000836020015182815181106124b8576124b8615208565b60200260200101516001600160a01b0316846040015183815181106124df576124df615208565b60200260200101516040516124f491906154ba565b6000604051808303816000865af19150503d8060008114612531576040519150601f19603f3d011682016040523d82523d6000602084013e612536565b606091505b50909150506001811515146125785760405162461bcd60e51b815260206004820152600860248201526743414c4c4441544160c01b60448201526064016104a9565b508061258381615234565b915050612497565b5060008460200151516001600160401b038111156125ab576125ab614a05565b6040519080825280602002602001820160405280156125d4578160200160208202803683370190505b50905060008560a00151516001600160401b038111156125f6576125f6614a05565b60405190808252806020026020018201604052801561261f578160200160208202803683370190505b50905060008660e00151516001600160401b0381111561264157612641614a05565b60405190808252806020026020018201604052801561266a578160200160208202803683370190505b509050600085600001518860200151888151811061268a5761268a615208565b60200260200101518960400151516126a291906154fd565b6126ac919061524d565b6001600160401b038111156126c3576126c3614a05565b6040519080825280602002602001820160405280156126ec578160200160208202803683370190505b50905085600001518860200151888151811061270a5761270a615208565b602002602001015189606001515161272291906154fd565b61272c919061524d565b6001600160401b0381111561274357612743614a05565b60405190808252806020026020018201604052801561276c578160200160208202803683370190505b509450600086600001518960200151898151811061278c5761278c615208565b60200260200101518a60800151516127a491906154fd565b6127ae919061524d565b6001600160401b038111156127c5576127c5614a05565b6040519080825280602002602001820160405280156127ee578160200160208202803683370190505b509050600087608001518a60a001518a8151811061280e5761280e615208565b60200260200101518b60c001515161282691906154fd565b612830919061524d565b6001600160401b0381111561284757612847614a05565b604051908082528060200260200182016040528015612870578160200160208202803683370190505b50905060008860c001518b60e001518b8151811061289057612890615208565b60200260200101518c6101000151516128a991906154fd565b6128b3919061524d565b6001600160401b038111156128ca576128ca614a05565b6040519080825280602002602001820160405280156128f3578160200160208202803683370190505b508b51519091508a90612908906001906154fd565b8b03612f6e5760005b81811015612966578c60200151818151811061292f5761292f615208565b602002602001015189828151811061294957612949615208565b60209081029190910101528061295e81615234565b915050612911565b50896000015188828151811061297e5761297e615208565b60200260200101818152505060005b818110156129e2578c60a0015181815181106129ab576129ab615208565b60200260200101518882815181106129c5576129c5615208565b6020908102919091010152806129da81615234565b91505061298d565b5089608001518782815181106129fa576129fa615208565b60200260200101818152505060005b81811015612a5e578c60e001518181518110612a2757612a27615208565b6020026020010151878281518110612a4157612a41615208565b602090810291909101015280612a5681615234565b915050612a09565b508960c00151868281518110612a7657612a76615208565b6020908102919091010152506000805b8b811015612acb578c602001518181518110612aa457612aa4615208565b602002602001015182612ab7919061524d565b915080612ac381615234565b915050612a86565b5060005b81811015612b31578c604001518181518110612aed57612aed615208565b6020026020010151868281518110612b0757612b07615208565b6001600160a01b039092166020928302919091019091015280612b2981615234565b915050612acf565b5060005b8a51811015612ba3578a602001518181518110612b5457612b54615208565b6020026020010151868383612b69919061524d565b81518110612b7957612b79615208565b6001600160a01b039092166020928302919091019091015280612b9b81615234565b915050612b35565b5060005b81811015612c13578c606001518181518110612bc557612bc5615208565b6020026020010151612bd690615260565b8a8281518110612be857612be8615208565b6001600160e01b03199092166020928302919091019091015280612c0b81615234565b915050612ba7565b5060005b8a51811015612c8d578a604001518181518110612c3657612c36615208565b6020026020010151612c4790615260565b8a612c52848461524d565b81518110612c6257612c62615208565b6001600160e01b03199092166020928302919091019091015280612c8581615234565b915050612c17565b5060005b81811015612ce6578c608001518181518110612caf57612caf615208565b6020026020010151858281518110612cc957612cc9615208565b602090810291909101015280612cde81615234565b915050612c91565b5060005b8a51811015612d4b578a606001518181518110612d0957612d09615208565b6020026020010151858383612d1e919061524d565b81518110612d2e57612d2e615208565b602090810291909101015280612d4381615234565b915050612cea565b506000905060005b8b811015612d98578c60a001518181518110612d7157612d71615208565b602002602001015182612d84919061524d565b915080612d9081615234565b915050612d53565b5060005b81811015612df1578c60c001518181518110612dba57612dba615208565b6020026020010151848281518110612dd457612dd4615208565b602090810291909101015280612de981615234565b915050612d9c565b5060005b8a60800151811015612e59578a60a001518181518110612e1757612e17615208565b6020026020010151848383612e2c919061524d565b81518110612e3c57612e3c615208565b602090810291909101015280612e5181615234565b915050612df5565b506000905060005b8b811015612ea6578c60e001518181518110612e7f57612e7f615208565b602002602001015182612e92919061524d565b915080612e9e81615234565b915050612e61565b5060005b81811015612f00578c61010001518181518110612ec957612ec9615208565b6020026020010151838281518110612ee357612ee3615208565b602090810291909101015280612ef881615234565b915050612eaa565b5060005b8a60c00151811015612f68578a60e001518181518110612f2657612f26615208565b6020026020010151838383612f3b919061524d565b81518110612f4b57612f4b615208565b602090810291909101015280612f6081615234565b915050612f04565b50613a7a565b60005b81811015612fc6578c602001518181518110612f8f57612f8f615208565b6020026020010151898281518110612fa957612fa9615208565b602090810291909101015280612fbe81615234565b915050612f71565b508960000151888281518110612fde57612fde615208565b60209081029190910101526000612ff682600161524d565b90505b8c6020015151811015613053578c60200151818151811061301c5761301c615208565b602002602001015189828151811061303657613036615208565b60209081029190910101528061304b81615234565b915050612ff9565b5060005b818110156130ac578c60a00151818151811061307557613075615208565b602002602001015188828151811061308f5761308f615208565b6020908102919091010152806130a481615234565b915050613057565b5089608001518782815181106130c4576130c4615208565b602090810291909101015260006130dc82600161524d565b90505b8c60a0015151811015613139578c60a00151818151811061310257613102615208565b602002602001015188828151811061311c5761311c615208565b60209081029190910101528061313181615234565b9150506130df565b5060005b81811015613192578c60e00151818151811061315b5761315b615208565b602002602001015187828151811061317557613175615208565b60209081029190910101528061318a81615234565b91505061313d565b508960c001518682815181106131aa576131aa615208565b602090810291909101015260006131c282600161524d565b90505b8c60e001515181101561321f578c60e0015181815181106131e8576131e8615208565b602002602001015187828151811061320257613202615208565b60209081029190910101528061321781615234565b9150506131c5565b50600080915060005b8d515181101561327a578c810361323d578192505b8d60200151818151811061325357613253615208565b602002602001015182613266919061524d565b91508061327281615234565b915050613228565b5060008d602001518d8151811061329357613293615208565b6020026020010151836132a6919061524d565b905060005b8381101561330d578e6040015181815181106132c9576132c9615208565b60200260200101518882815181106132e3576132e3615208565b6001600160a01b03909216602092830291909101909101528061330581615234565b9150506132ab565b5060005b8c5181101561337f578c60200151818151811061333057613330615208565b6020026020010151888583613345919061524d565b8151811061335557613355615208565b6001600160a01b03909216602092830291909101909101528061337781615234565b915050613311565b5060005b61338d82846154fd565b8110156134115760408f01516133a3828461524d565b815181106133b3576133b3615208565b6020026020010151888e6000015186846133cd919061524d565b6133d7919061524d565b815181106133e7576133e7615208565b6001600160a01b03909216602092830291909101909101528061340981615234565b915050613383565b5060005b83811015613481578e60600151818151811061343357613433615208565b602002602001015161344490615260565b8c828151811061345657613456615208565b6001600160e01b0319909216602092830291909101909101528061347981615234565b915050613415565b5060005b8c518110156134fb578c6040015181815181106134a4576134a4615208565b60200260200101516134b590615260565b8c6134c0868461524d565b815181106134d0576134d0615208565b6001600160e01b031990921660209283029190910190910152806134f381615234565b915050613485565b5060005b61350982846154fd565b8110156135935760608f015161351f828461524d565b8151811061352f5761352f615208565b602002602001015161354090615260565b8d518d9061354e878561524d565b613558919061524d565b8151811061356857613568615208565b6001600160e01b0319909216602092830291909101909101528061358b81615234565b9150506134ff565b5060005b838110156135ec578e6080015181815181106135b5576135b5615208565b60200260200101518782815181106135cf576135cf615208565b6020908102919091010152806135e481615234565b915050613597565b5060005b8c51811015613651578c60600151818151811061360f5761360f615208565b6020026020010151878583613624919061524d565b8151811061363457613634615208565b60209081029190910101528061364981615234565b9150506135f0565b5060005b61365f82846154fd565b8110156136d65760808f0151613675828461524d565b8151811061368557613685615208565b6020026020010151878e60000151868461369f919061524d565b6136a9919061524d565b815181106136b9576136b9615208565b6020908102919091010152806136ce81615234565b915050613655565b50600091506000925060005b8e5151811015613734578d81036136f7578293505b8e60a00151818151811061370d5761370d615208565b602002602001015183613720919061524d565b92508061372c81615234565b9150506136e2565b508d60a001518d8151811061374b5761374b615208565b60200260200101518361375e919061524d565b905060005b838110156137b8578e60c00151818151811061378157613781615208565b602002602001015186828151811061379b5761379b615208565b6020908102919091010152806137b081615234565b915050613763565b5060005b8c60800151811015613820578c60a0015181815181106137de576137de615208565b60200260200101518685836137f3919061524d565b8151811061380357613803615208565b60209081029190910101528061381881615234565b9150506137bc565b5060005b61382e82846154fd565b8110156138a55760c08f0151613844828461524d565b8151811061385457613854615208565b6020026020010151868e60800151868461386e919061524d565b613878919061524d565b8151811061388857613888615208565b60209081029190910101528061389d81615234565b915050613824565b50600091506000925060005b8e5151811015613903578d81036138c6578293505b8e60e0015181815181106138dc576138dc615208565b6020026020010151836138ef919061524d565b9250806138fb81615234565b9150506138b1565b508d60e001518d8151811061391a5761391a615208565b60200260200101518361392d919061524d565b905060005b83811015613988578e6101000151818151811061395157613951615208565b602002602001015185828151811061396b5761396b615208565b60209081029190910101528061398081615234565b915050613932565b5060005b8c60c001518110156139f0578c60e0015181815181106139ae576139ae615208565b60200260200101518585836139c3919061524d565b815181106139d3576139d3615208565b6020908102919091010152806139e881615234565b91505061398c565b5060005b6139fe82846154fd565b811015613a76576101008f0151613a15828461524d565b81518110613a2557613a25615208565b6020026020010151858e60c001518684613a3f919061524d565b613a49919061524d565b81518110613a5957613a59615208565b602090810291909101015280613a6e81615234565b9150506139f4565b5050505b8b51604051613a9c91908a9088908d9089908d908a908e908b906020016152ed565b60408051601f198184030181529082905280516020909101206008558c517fdf3782d38af4ae54183a27faea5e61e7d27832f0f7df356a318c7fb9be2b553d916109e991908b9089908e908a908e908b908f908c906153b3565b613afe613bc5565b6001600160a01b038116613b635760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104a9565b613b6c816143ad565b50565b613b77613bc5565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f65c06354eb3fcefa304d7f9e42b42755fb21798520591cfbd099ef50d24f0dcd90602001610b7e565b6000546001600160a01b03163314611b4d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104a9565b606081516001600160401b03811115613c3a57613c3a614a05565b604051908082528060200260200182016040528015613c63578160200160208202803683370190505b50905060005b8251811015613cd257828181518110613c8457613c84615208565b6020026020010151613c9590615260565b828281518110613ca757613ca7615208565b6001600160e01b03199092166020928302919091019091015280613cca81615234565b915050613c69565b50919050565b8151602080840151604080860151608087015160a088015160c089015160e08a01516101008b01519551613d13999895968b969091016152ed565b6040516020818303038152906040528051906020012060001c60085414613d655760405162461bcd60e51b81526004016104a9906020808252600490820152634441544160e01b604082015260600190565b5050565b6020810151518151148015613d8357506040810151518151145b8015613d9457506060810151518151145b8015613da857508060a00151518160800151145b8015613dbc57508060e00151518160c00151145b613df45760405162461bcd60e51b815260206004820152600960248201526820a92920acafa622a760b91b60448201526064016104a9565b60005b8151811015613d6557600082602001518281518110613e1857613e18615208565b60200260200101516001600160a01b031683604001518381518110613e3f57613e3f615208565b6020026020010151604051613e5491906154ba565b6000604051808303816000865af19150503d8060008114613e91576040519150601f19603f3d011682016040523d82523d6000602084013e613e96565b606091505b5090915050600181151514613ed85760405162461bcd60e51b815260206004820152600860248201526743414c4c4441544160c01b60448201526064016104a9565b5080613ee381615234565b915050613df7565b606082516001613efb919061524d565b6001600160401b03811115613f1257613f12614a05565b604051908082528060200260200182016040528015613f3b578160200160208202803683370190505b50905060005b8351811015613f9357838181518110613f5c57613f5c615208565b6020026020010151828281518110613f7657613f76615208565b602090810291909101015280613f8b81615234565b915050613f41565b508181845181518110613fa857613fa8615208565b60200260200101818152505092915050565b606081518351613fca919061524d565b6001600160401b03811115613fe157613fe1614a05565b60405190808252806020026020018201604052801561400a578160200160208202803683370190505b50905060005b83518110156140625783818151811061402b5761402b615208565b602002602001015182828151811061404557614045615208565b60209081029190910101528061405a81615234565b915050614010565b50825160005b83518110156140c55783818151811061408357614083615208565b6020026020010151838383614098919061524d565b815181106140a8576140a8615208565b6020908102919091010152806140bd81615234565b915050614068565b505092915050565b60008060005b602081101561412a576140e781600861566a565b856140f2838761524d565b8151811061410257614102615208565b01602001516001600160f81b031916901c91909117908061412281615234565b9150506140d3565b5090505b92915050565b600e546001600160a01b0316806141485750565b600d54600f54604051630502c30760e51b81526000926001600160a01b038086169363a05860e09361418c939092169130916001600160d81b031690600401615510565b602060405180830381865afa1580156141a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141cd919061553c565b604051636bc1609560e01b8152600481018290529091506001600160a01b03831690636bc1609590602401602060405180830381865afa158015614215573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614239919061553c565b600003614244575050565b6000826001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142a89190615681565b600d54600f546040516305e959b960e21b81529293506001600160a01b03808716936317a566e4936142ed9392169130916001600160d81b0390911690600401615510565b600060405180830381600087803b15801561430757600080fd5b505af115801561431b573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03841691506370a0823190602401602060405180830381865afa158015614366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061438a919061553c565b6005549091506143a7906001600160a01b038481169116836146ec565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081516001600160401b0381111561441857614418614a05565b604051908082528060200260200182016040528015614441578160200160208202803683370190505b50905060008060005b84518110156145505784818151811061446557614465615208565b60200260200101516001600160a01b03166301e1d1146040518163ffffffff1660e01b8152600401602060405180830381865afa1580156144aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144ce919061553c565b8482815181106144e0576144e0615208565b6020026020010181815250508381815181106144fe576144fe615208565b602002602001015183614511919061524d565b92506004818154811061452657614526615208565b90600052602060002001548261453c919061524d565b91508061454881615234565b91505061444a565b508060000361457257825161456c9060049060208601906149a5565b506143a7565b81811161463257600061458582846154fd565b905060005b855181101561462b57600083600483815481106145a9576145a9615208565b90600052602060002001546001546145c1919061566a565b6145cb919061569e565b6001549091506145db848361566a565b6145e5919061569e565b600483815481106145f8576145f8615208565b906000526020600020016000828254614611919061524d565b90915550829150614623905081615234565b91505061458a565b50506143a7565b600061463e83836154fd565b905060005b85518110156146e4576000836004838154811061466257614662615208565b906000526020600020015460015461467a919061566a565b614684919061569e565b600154909150614694848361566a565b61469e919061569e565b600483815481106146b1576146b1615208565b9060005260206000200160008282546146ca91906154fd565b909155508291506146dc905081615234565b915050614643565b505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261473e908490614743565b505050565b6000614798826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166148159092919063ffffffff16565b80519091501561473e57808060200190518101906147b69190615609565b61473e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104a9565b6060614824848460008561482c565b949350505050565b60608247101561488d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104a9565b600080866001600160a01b031685876040516148a991906154ba565b60006040518083038185875af1925050503d80600081146148e6576040519150601f19603f3d011682016040523d82523d6000602084013e6148eb565b606091505b50915091506148fc87838387614907565b979650505050505050565b6060831561497657825160000361496f576001600160a01b0385163b61496f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104a9565b5081614824565b614824838381511561498b5781518083602001fd5b8060405162461bcd60e51b81526004016104a991906156c0565b8280548282559060005260206000209081019282156149e0579160200282015b828111156149e05782518255916020019190600101906149c5565b506149ec9291506149f0565b5090565b5b808211156149ec57600081556001016149f1565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b0381118282101715614a3e57614a3e614a05565b60405290565b60405161010081016001600160401b0381118282101715614a3e57614a3e614a05565b604051601f8201601f191681016001600160401b0381118282101715614a8f57614a8f614a05565b604052919050565b60006001600160401b03821115614ab057614ab0614a05565b5060051b60200190565b6001600160a01b0381168114613b6c57600080fd5b600082601f830112614ae057600080fd5b81356020614af5614af083614a97565b614a67565b82815260059290921b84018101918181019086841115614b1457600080fd5b8286015b84811015614b38578035614b2b81614aba565b8352918301918301614b18565b509695505050505050565b600082601f830112614b5457600080fd5b81356020614b64614af083614a97565b82815260059290921b84018101918181019086841115614b8357600080fd5b8286015b84811015614b385780358352918301918301614b87565b6000601f8381840112614bb057600080fd5b82356020614bc0614af083614a97565b82815260059290921b85018101918181019087841115614bdf57600080fd5b8287015b84811015614c755780356001600160401b0380821115614c035760008081fd5b818a0191508a603f830112614c185760008081fd5b85820135604082821115614c2e57614c2e614a05565b614c3f828b01601f19168901614a67565b92508183528c81838601011115614c565760008081fd5b8181850189850137506000908201870152845250918301918301614be3565b50979650505050505050565b60006101208284031215614c9457600080fd5b614c9c614a1b565b905081356001600160401b0380821115614cb557600080fd5b614cc185838601614acf565b83526020840135915080821115614cd757600080fd5b614ce385838601614b43565b60208401526040840135915080821115614cfc57600080fd5b614d0885838601614acf565b60408401526060840135915080821115614d2157600080fd5b614d2d85838601614b9e565b60608401526080840135915080821115614d4657600080fd5b614d5285838601614b43565b608084015260a0840135915080821115614d6b57600080fd5b614d7785838601614b43565b60a084015260c0840135915080821115614d9057600080fd5b614d9c85838601614b43565b60c084015260e0840135915080821115614db557600080fd5b614dc185838601614b43565b60e084015261010091508184013581811115614ddc57600080fd5b614de886828701614b43565b8385015250505092915050565b60006101008284031215614e0857600080fd5b614e10614a44565b90508135815260208201356001600160401b0380821115614e3057600080fd5b614e3c85838601614acf565b60208401526040840135915080821115614e5557600080fd5b614e6185838601614b9e565b60408401526060840135915080821115614e7a57600080fd5b614e8685838601614b43565b60608401526080840135608084015260a0840135915080821115614ea957600080fd5b614eb585838601614b43565b60a084015260c084013560c084015260e0840135915080821115614ed857600080fd5b50614ee584828501614b43565b60e08301525092915050565b600080600060608486031215614f0657600080fd5b83356001600160401b0380821115614f1d57600080fd5b614f2987838801614c81565b945060208601359150614f3b82614aba565b90925060408501359080821115614f5157600080fd5b50614f5e86828701614df5565b9150509250925092565b600080600060608486031215614f7d57600080fd5b83356001600160401b0380821115614f9457600080fd5b614fa087838801614acf565b94506020860135915080821115614fb657600080fd5b614fc287838801614b9e565b93506040860135915080821115614fd857600080fd5b50614f5e86828701614b43565b600081518084526020808501945080840160005b8381101561501557815187529582019590820190600101614ff9565b509495945050505050565b6020815260006150336020830184614fe5565b9392505050565b60006020828403121561504c57600080fd5b5035919050565b6000806040838503121561506657600080fd5b82356001600160401b0381111561507c57600080fd5b61508885828601614c81565b95602094909401359450505050565b6000806000606084860312156150ac57600080fd5b83356150b781614aba565b925060208401356150c781614aba565b915060408401356001600160d81b03811681146150e357600080fd5b809150509250925092565b60006020828403121561510057600080fd5b81356001600160401b0381111561511657600080fd5b61482484828501614b43565b85815260a06020820152600061513b60a0830187614fe5565b828103604084015261514d8187614fe5565b60608401959095525050608001529392505050565b60006020828403121561517457600080fd5b81356001600160401b0381111561518a57600080fd5b61482484828501614c81565b6000806000606084860312156151ab57600080fd5b83356001600160401b03808211156151c257600080fd5b6151ce87838801614c81565b9450602086013593506040860135915080821115614f5157600080fd5b6000602082840312156151fd57600080fd5b813561503381614aba565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016152465761524661521e565b5060010190565b8082018082111561412e5761412e61521e565b805160208201516001600160e01b0319808216929190600483101561528f5780818460040360031b1b83161693505b505050919050565b60008151602080840160005b838110156150155781516001600160a01b0316875295820195908201906001016152a3565b8051600090602080840183831561501557815187529582019590820190600101614ff9565b600061530b6153056152ff848e615297565b8c6152c8565b8a615297565b88516020808b0160005b8381101561533b5781516001600160e01b03191685529382019390820190600101615315565b5050505061536d61536761536161535b615355858d6152c8565b8b6152c8565b896152c8565b876152c8565b856152c8565b9c9b505050505050505050505050565b8051808352602092830192600091908084018383156150155781516001600160a01b0316875295820195908201906001016152a3565b60006101208083526153c78184018d61537d565b90506020838203818501526153dc828d614fe5565b915083820360408501526153f0828c61537d565b84810360608601528a51808252828c0193509082019060005b8181101561542f5784516001600160e01b03191683529383019391830191600101615409565b50508481036080860152615443818b614fe5565b9250505082810360a08401526154598188614fe5565b905082810360c084015261546d8187614fe5565b905082810360e08401526154818186614fe5565b905082810361010084015261536d8185614fe5565b60005b838110156154b1578181015183820152602001615499565b50506000910152565b600082516154cc818460208701615496565b9190910192915050565b6020808252600d908201526c4e4f5f5354524154454749455360981b604082015260600190565b8181038181111561412e5761412e61521e565b6001600160a01b0393841681529190921660208201526001600160d81b03909116604082015260600190565b60006020828403121561554e57600080fd5b5051919050565b600061557361556d61556784886152c8565b866152c8565b846152c8565b95945050505050565b60808152600061558f6080830187614fe5565b6020838203818501526155a28288614fe5565b915083820360408501526155b68287614fe5565b8481036060860152855480825260008781528381209450918301915b818110156155ee578454835260019485019492840192016155d2565b50909998505050505050505050565b600061503382846152c8565b60006020828403121561561b57600080fd5b8151801515811461503357600080fd5b85815260a06020820152600061564460a0830187614fe5565b6001600160a01b0395909516604083015250606081019290925260809091015292915050565b808202811582820484141761412e5761412e61521e565b60006020828403121561569357600080fd5b815161503381614aba565b6000826156bb57634e487b7160e01b600052601260045260246000fd5b500490565b60208152600082518060208401526156df816040850160208701615496565b601f01601f1916919091016040019291505056fea264697066735822122048b37f8e92556a4a2e2029b6b2af9e6aeeb987345f15980544dfb2e8117f17f064736f6c63430008110033"},"devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"runtimeBytecode":{"bytecode":"0x60806040819052670de0b6b3a7640000600155600280546001600160a01b0319169055600060035562015180600b819055600c5569152d02c7e14af680000060105562005838388190039081908339810160408190526200006091620000c3565b6200006b3362000073565b5050620000ff565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060408385031215620000d757600080fd5b82516001600160a01b0381168114620000ef57600080fd5b6020939093015192949293505050565b615729806200010f6000396000f3fe608060405234801561001057600080fd5b50600436106101e45760003560e01c806380609a6c1161010f578063c0463711116100a2578063d0d202b311610071578063d0d202b3146103e5578063eaf3a188146103f8578063f2fde38b14610418578063fd94c6801461042b57600080fd5b8063c0463711146103b7578063c1a2e32b146103c0578063c671dbd9146103d3578063cfce5dd9146103dc57600080fd5b8063a8e4fb90116100de578063a8e4fb9014610375578063ad957ac314610388578063b03780a11461039b578063b21f147f146103ae57600080fd5b806380609a6c1461033f5780638da5cb5b14610352578063a1221c6f14610363578063a5b36a361461036c57600080fd5b806327756afd116101875780635dbc7af4116101565780635dbc7af4146102f7578063644900a61461031b578063673247851461032e578063715018a61461033757600080fd5b806327756afd146102b2578063372500ab146102d3578063374e8334146102db578063408378bd146102e457600080fd5b80630e076ac3116101c35780630e076ac31461024e5780630e0cdd2e14610279578063126662d31461028c5780631ebe1d681461029f57600080fd5b8062893452146101e9578063030e886914610219578063078e07d71461022e575b600080fd5b600f546101fc906001600160d81b031681565b6040516001600160d81b0390911681526020015b60405180910390f35b61022c610227366004614ef1565b61043e565b005b61024161023c366004614f68565b6109ff565b6040516102109190615020565b600e54610261906001600160a01b031681565b6040516001600160a01b039091168152602001610210565b61022c61028736600461503a565b610b45565b61022c61029a366004615053565b610b89565b61022c6102ad366004615097565b611968565b6102c56102c036600461503a565b611adc565b604051908152602001610210565b61022c611afd565b6102c560105481565b600d54610261906001600160a01b031681565b61030a6103053660046150ee565b611b4f565b604051610210959493929190615122565b61022c61032936600461503a565b611dab565b6102c560035481565b61022c611de8565b61022c61034d366004615162565b611dfa565b6000546001600160a01b0316610261565b6102c5600b5481565b6102c5600c5481565b600554610261906001600160a01b031681565b6102c56103963660046150ee565b611f9f565b600254610261906001600160a01b031681565b6102c560095481565b6102c560075481565b61022c6103ce36600461503a565b612292565b6102c560065481565b6102c560085481565b61022c6103f3366004615196565b6122cf565b6102c561040636600461503a565b600a6020526000908152604090205481565b61022c6104263660046151eb565b613af6565b61022c6104393660046151eb565b613b6f565b610446613bc5565b60006104558460600151613c1f565b90506008546000146104705761046b8482613cd8565b6104b2565b835151156104b25760405162461bcd60e51b815260206004820152600a60248201526946495253545f4441544160b01b60448201526064015b60405180910390fd5b60005b84515181101561054157836001600160a01b0316856000015182815181106104df576104df615208565b60200260200101516001600160a01b03160361052f5760405162461bcd60e51b815260206004820152600f60248201526e53545241544547595f45584953545360881b60448201526064016104a9565b8061053981615234565b9150506104b5565b5061054b82613d69565b83515160009061055c90600161524d565b6001600160401b0381111561057357610573614a05565b60405190808252806020026020018201604052801561059c578160200160208202803683370190505b50905060005b8551518110156106045785518051829081106105c0576105c0615208565b60200260200101518282815181106105da576105da615208565b6001600160a01b0390921660209283029190910190910152806105fc81615234565b9150506105a2565b5083818660000151518151811061061d5761061d615208565b6001600160a01b03909216602092830291909101820152850151835160009161064591613eeb565b90506000846000015187604001515161065e919061524d565b6001600160401b0381111561067557610675614a05565b60405190808252806020026020018201604052801561069e578160200160208202803683370190505b50905060005b87604001515181101561070b57876040015181815181106106c7576106c7615208565b60200260200101518282815181106106e1576106e1615208565b6001600160a01b03909216602092830291909101909101528061070381615234565b9150506106a4565b5060005b8551811015610782578560200151818151811061072e5761072e615208565b60200260200101518289604001515183610748919061524d565b8151811061075857610758615208565b6001600160a01b03909216602092830291909101909101528061077a81615234565b91505061070f565b508451606088015151610795919061524d565b6001600160401b038111156107ac576107ac614a05565b6040519080825280602002602001820160405280156107d5578160200160208202803683370190505b50935060005b87606001515181101561084c57876060015181815181106107fe576107fe615208565b602002602001015161080f90615260565b85828151811061082157610821615208565b6001600160e01b0319909216602092830291909101909101528061084481615234565b9150506107db565b5060005b85518110156108cd578560400151818151811061086f5761086f615208565b602002602001015161088090615260565b8589606001515183610892919061524d565b815181106108a2576108a2615208565b6001600160e01b031990921660209283029190910190910152806108c581615234565b915050610850565b5060006108e288608001518760600151613fba565b905060006108f88960a001518860800151613eeb565b9050600061090e8a60c001518960a00151613fba565b905060006109248b60e001518a60c00151613eeb565b9050600061093b8c61010001518b60e00151613fba565b90508787878b888888888860405160200161095e999897969594939291906152ed565b60408051601f198184030181529082905280516020909101206008556004805460018101825560009182527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01557f8e53c9a718e34c6a61b1c74a1c66c621f44ef9e718867f22079ac7a600042ee1906109e9908a908a908a908e908b908b908b908b908b906153b3565b60405180910390a1505050505050505050505050565b6060600084516001600160401b03811115610a1c57610a1c614a05565b604051908082528060200260200182016040528015610a45578160200160208202803683370190505b50905060005b8551811015610b3c576000868281518110610a6857610a68615208565b60200260200101516001600160a01b0316868381518110610a8b57610a8b615208565b6020026020010151604051610aa091906154ba565b6000604051808303816000865af19150503d8060008114610add576040519150601f19603f3d011682016040523d82523d6000602084013e610ae2565b606091505b50915050610b0981868481518110610afc57610afc615208565b60200260200101516140cd565b60001c838381518110610b1e57610b1e615208565b60209081029190910101525080610b3481615234565b915050610a4b565b50949350505050565b610b4d613bc5565b60038190556040518181527ff1ec1146b34ac057e939c68e0d1b14850406891906b28277b3bb7021740a9c4a906020015b60405180910390a150565b610b91613bc5565b600854600003610bb35760405162461bcd60e51b81526004016104a9906154d6565b6000610bc28360600151613c1f565b9050610bce8382613cd8565b8251518210610bdc57600080fd5b60006001846020015151610bf091906154fd565b6001600160401b03811115610c0757610c07614a05565b604051908082528060200260200182016040528015610c30578160200160208202803683370190505b509050600060018560a0015151610c4791906154fd565b6001600160401b03811115610c5e57610c5e614a05565b604051908082528060200260200182016040528015610c87578160200160208202803683370190505b509050600060018660e0015151610c9e91906154fd565b6001600160401b03811115610cb557610cb5614a05565b604051908082528060200260200182016040528015610cde578160200160208202803683370190505b509050600086602001518681518110610cf957610cf9615208565b6020026020010151876040015151610d1191906154fd565b6001600160401b03811115610d2857610d28614a05565b604051908082528060200260200182016040528015610d51578160200160208202803683370190505b50905086602001518681518110610d6a57610d6a615208565b6020026020010151876060015151610d8291906154fd565b6001600160401b03811115610d9957610d99614a05565b604051908082528060200260200182016040528015610dc2578160200160208202803683370190505b509450600087602001518781518110610ddd57610ddd615208565b6020026020010151886080015151610df591906154fd565b6001600160401b03811115610e0c57610e0c614a05565b604051908082528060200260200182016040528015610e35578160200160208202803683370190505b50905060008860a001518881518110610e5057610e50615208565b60200260200101518960c0015151610e6891906154fd565b6001600160401b03811115610e7f57610e7f614a05565b604051908082528060200260200182016040528015610ea8578160200160208202803683370190505b50905060008960e001518981518110610ec357610ec3615208565b60200260200101518a610100015151610edc91906154fd565b6001600160401b03811115610ef357610ef3614a05565b604051908082528060200260200182016040528015610f1c578160200160208202803683370190505b5090508860005b81811015610f78578b602001518181518110610f4157610f41615208565b6020026020010151898281518110610f5b57610f5b615208565b602090810291909101015280610f7081615234565b915050610f23565b5060005b610f8782600161524d565b8c5151610f9491906154fd565b8110156110085760208c015181610fac84600161524d565b610fb6919061524d565b81518110610fc657610fc6615208565b6020026020010151898284610fdb919061524d565b81518110610feb57610feb615208565b60209081029190910101528061100081615234565b915050610f7c565b5060005b81811015611061578b60a00151818151811061102a5761102a615208565b602002602001015188828151811061104457611044615208565b60209081029190910101528061105981615234565b91505061100c565b5060005b61107082600161524d565b8c515161107d91906154fd565b8110156110f15760a08c01518161109584600161524d565b61109f919061524d565b815181106110af576110af615208565b60200260200101518882846110c4919061524d565b815181106110d4576110d4615208565b6020908102919091010152806110e981615234565b915050611065565b5060005b8181101561114a578b60e00151818151811061111357611113615208565b602002602001015187828151811061112d5761112d615208565b60209081029190910101528061114281615234565b9150506110f5565b5060005b61115982600161524d565b8c515161116691906154fd565b8110156111da5760e08c01518161117e84600161524d565b611188919061524d565b8151811061119857611198615208565b60200260200101518782846111ad919061524d565b815181106111bd576111bd615208565b6020908102919091010152806111d281615234565b91505061114e565b50600080915060005b8c5151811015611235578b81036111f8578192505b8c60200151818151811061120e5761120e615208565b602002602001015182611221919061524d565b91508061122d81615234565b9150506111e3565b5060005b8281101561129b578c60400151818151811061125757611257615208565b602002602001015187828151811061127157611271615208565b6001600160a01b03909216602092830291909101909101528061129381615234565b915050611239565b5060005b8c602001518c815181106112b5576112b5615208565b6020026020010151836112c8919061524d565b6112d290836154fd565b811015611371578c60400151818e602001518e815181106112f5576112f5615208565b602002602001015185611308919061524d565b611312919061524d565b8151811061132257611322615208565b6020026020010151878483611337919061524d565b8151811061134757611347615208565b6001600160a01b03909216602092830291909101909101528061136981615234565b91505061129f565b5060005b828110156113e1578c60600151818151811061139357611393615208565b60200260200101516113a490615260565b8b82815181106113b6576113b6615208565b6001600160e01b031990921660209283029190910190910152806113d981615234565b915050611375565b5060005b8c602001518c815181106113fb576113fb615208565b60200260200101518361140e919061524d565b61141890836154fd565b8110156114bf578c60600151818e602001518e8151811061143b5761143b615208565b60200260200101518561144e919061524d565b611458919061524d565b8151811061146857611468615208565b602002602001015161147990615260565b8b611484858461524d565b8151811061149457611494615208565b6001600160e01b031990921660209283029190910190910152806114b781615234565b9150506113e5565b5060005b82811015611518578c6080015181815181106114e1576114e1615208565b60200260200101518682815181106114fb576114fb615208565b60209081029190910101528061151081615234565b9150506114c3565b5060005b8c602001518c8151811061153257611532615208565b602002602001015183611545919061524d565b61154f90836154fd565b8110156115e1578c60800151818e602001518e8151811061157257611572615208565b602002602001015185611585919061524d565b61158f919061524d565b8151811061159f5761159f615208565b60200260200101518684836115b4919061524d565b815181106115c4576115c4615208565b6020908102919091010152806115d981615234565b91505061151c565b50600090506000915060005b8c515181101561163f578b8103611602578192505b8c60a00151818151811061161857611618615208565b60200260200101518261162b919061524d565b91508061163781615234565b9150506115ed565b5060005b82811015611698578c60c00151818151811061166157611661615208565b602002602001015185828151811061167b5761167b615208565b60209081029190910101528061169081615234565b915050611643565b5060005b8c60a001518c815181106116b2576116b2615208565b6020026020010151836116c5919061524d565b6116cf90836154fd565b811015611761578c60c00151818e60a001518e815181106116f2576116f2615208565b602002602001015185611705919061524d565b61170f919061524d565b8151811061171f5761171f615208565b6020026020010151858483611734919061524d565b8151811061174457611744615208565b60209081029190910101528061175981615234565b91505061169c565b50600090506000915060005b8c51518110156117bf578b8103611782578192505b8c60e00151818151811061179857611798615208565b6020026020010151826117ab919061524d565b9150806117b781615234565b91505061176d565b5060005b82811015611819578c610100015181815181106117e2576117e2615208565b60200260200101518482815181106117fc576117fc615208565b60209081029190910101528061181181615234565b9150506117c3565b5060005b8c60e001518c8151811061183357611833615208565b602002602001015183611846919061524d565b61185090836154fd565b8110156118e3578c6101000151818e60e001518e8151811061187457611874615208565b602002602001015185611887919061524d565b611891919061524d565b815181106118a1576118a1615208565b60200260200101518484836118b6919061524d565b815181106118c6576118c6615208565b6020908102919091010152806118db81615234565b91505061181d565b508b5160405161190691908b9089908e908a908e908b908f908c906020016152ed565b6040516020818303038152906040528051906020012060001c6008819055507f30bb8971424ac048a04b1a560b5d691478a0bab916cf71a19c08b2c69ab32f2d8c600001518a888d898d8a8e8b6040516109e9999897969594939291906153b3565b611970613bc5565b604051630502c30760e51b81526000906001600160a01b0384169063a05860e0906119a390879030908790600401615510565b602060405180830381865afa1580156119c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e4919061553c565b604051636bc1609560e01b8152600481018290529091506000906001600160a01b03851690636bc1609590602401602060405180830381865afa158015611a2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a53919061553c565b11611a895760405162461bcd60e51b815260206004820152600660248201526553545245414d60d01b60448201526064016104a9565b50600d80546001600160a01b03199081166001600160a01b0395861617909155600e80549091169290931691909117909155600f80546001600160d81b0319166001600160d81b03909216919091179055565b60048181548110611aec57600080fd5b600091825260209091200154905081565b6005546001600160a01b03163314611b455760405162461bcd60e51b815260206004820152600b60248201526a1393d517d0531313d5d15160aa1b60448201526064016104a9565b611b4d614134565b565b60006060806000806000608087600081518110611b6e57611b6e615208565b6020026020010151901b905086600181518110611b8d57611b8d615208565b602002602001015181611ba0919061524d565b9050600087600281518110611bb757611bb7615208565b60200260200101516001600160401b03811115611bd657611bd6614a05565b604051908082528060200260200182016040528015611bff578160200160208202803683370190505b509050600088600281518110611c1757611c17615208565b60200260200101516001600160401b03811115611c3657611c36614a05565b604051908082528060200260200182016040528015611c5f578160200160208202803683370190505b50905060005b89600281518110611c7857611c78615208565b6020026020010151811015611d435789611c9382600361524d565b81518110611ca357611ca3615208565b6020026020010151838281518110611cbd57611cbd615208565b602002602001018181525050898a600281518110611cdd57611cdd615208565b6020026020010151826004611cf2919061524d565b611cfc919061524d565b81518110611d0c57611d0c615208565b6020026020010151828281518110611d2657611d26615208565b602090810291909101015280611d3b81615234565b915050611c65565b508282828b60028d51611d5691906154fd565b81518110611d6657611d66615208565b60200260200101518c60018e51611d7d91906154fd565b81518110611d8d57611d8d615208565b60200260200101519750975097509750975050505091939590929450565b611db3613bc5565b600b8190556040518181527fb661c316bad6aba02e92ad9084ba0146824efd8c122d24f668d4c6845cd0b80c90602001610b7e565b611df0613bc5565b611b4d60006143ad565b600854600003611e1c5760405162461bcd60e51b81526004016104a9906154d6565b60008160600151516001600160401b03811115611e3b57611e3b614a05565b604051908082528060200260200182016040528015611e64578160200160208202803683370190505b50905060005b826060015151811015611edb5782606001518181518110611e8d57611e8d615208565b6020026020010151611e9e90615260565b828281518110611eb057611eb0615208565b6001600160e01b03199092166020928302919091019091015280611ed381615234565b915050611e6a565b50611ee68282613cd8565b8151611ef1906143fd565b6000611f0a8360400151846060015185608001516109ff565b9050808360c00151846101000151604051602001611f2a93929190615555565b60408051601f19818403018152828252805160209182012060098190556000908152600a9091522042905560c08401516101008501517f316d5bca887648a73e73b926bab4c3ce4607be522c563cae9ba58f917b319f8692611f92928592909160049061557c565b60405180910390a1505050565b6009546000908152600a6020526040812054600b544290611fc0908361524d565b11611ffe5760405162461bcd60e51b815260206004820152600e60248201526d14d510531157d4d3905414d213d560921b60448201526064016104a9565b600080600080600061200f88611b4f565b9450945094509450945060095485146120535760405162461bcd60e51b81526004016104a99060208082526004908201526309082a6960e31b604082015260600190565b835160045414801561206757508251600454145b6120b35760405162461bcd60e51b815260206004820152601860248201527f5441524745545f414c4c4f434154494f4e5f4c454e475448000000000000000060448201526064016104a9565b81601054826120c291906154fd565b10156120fa5760405162461bcd60e51b81526020600482015260076024820152661513d3d7d0905160ca1b60448201526064016104a9565b60008860405160200161210d91906155fd565b604051602081830303815290604052805190602001209050600060035482604051602001612145929190918252602082015260400190565b60408051808303601f19018152908290528051602090910120600254636a93856760e01b8352600483018290529092506001600160a01b031690636a93856790602401602060405180830381865afa1580156121a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c99190615609565b6122055760405162461bcd60e51b815260206004820152600d60248201526c26a4a9a9a4a723afa82927a7a360991b60448201526064016104a9565b84516122189060049060208801906149a5565b5042600755612225614134565b600580546001600160a01b0319163317905561224184846154fd565b60068190556040517fd5fcaa64c9cd5e658564ea2213a28b82e520ca0b84641401e702c3f6495be2ec9161227d9186918991339190429061562b565b60405180910390a19998505050505050505050565b61229a613bc5565b600c8190556040518181527f6c5816d6599cc31297ca644605cb3d6d8adb2c4bf581eaa2b0827880a5e3b52790602001610b7e565b6122d7613bc5565b6008546000036122f95760405162461bcd60e51b81526004016104a9906154d6565b60008360600151516001600160401b0381111561231857612318614a05565b604051908082528060200260200182016040528015612341578160200160208202803683370190505b50905060005b8460600151518110156123b8578460600151818151811061236a5761236a615208565b602002602001015161237b90615260565b82828151811061238d5761238d615208565b6001600160e01b031990921660209283029190910190910152806123b081615234565b915050612347565b506123c38482613cd8565b83515183106124095760405162461bcd60e51b8152602060048201526012602482015271494e4445585f4f55545f4f465f52414e474560701b60448201526064016104a9565b602082015151825114801561242357506040820151518251145b801561243457506060820151518251145b801561244857508160a00151518260800151145b801561245c57508160e00151518260c00151145b6124945760405162461bcd60e51b815260206004820152600960248201526820a92920acafa622a760b91b60448201526064016104a9565b60005b825181101561258b576000836020015182815181106124b8576124b8615208565b60200260200101516001600160a01b0316846040015183815181106124df576124df615208565b60200260200101516040516124f491906154ba565b6000604051808303816000865af19150503d8060008114612531576040519150601f19603f3d011682016040523d82523d6000602084013e612536565b606091505b50909150506001811515146125785760405162461bcd60e51b815260206004820152600860248201526743414c4c4441544160c01b60448201526064016104a9565b508061258381615234565b915050612497565b5060008460200151516001600160401b038111156125ab576125ab614a05565b6040519080825280602002602001820160405280156125d4578160200160208202803683370190505b50905060008560a00151516001600160401b038111156125f6576125f6614a05565b60405190808252806020026020018201604052801561261f578160200160208202803683370190505b50905060008660e00151516001600160401b0381111561264157612641614a05565b60405190808252806020026020018201604052801561266a578160200160208202803683370190505b509050600085600001518860200151888151811061268a5761268a615208565b60200260200101518960400151516126a291906154fd565b6126ac919061524d565b6001600160401b038111156126c3576126c3614a05565b6040519080825280602002602001820160405280156126ec578160200160208202803683370190505b50905085600001518860200151888151811061270a5761270a615208565b602002602001015189606001515161272291906154fd565b61272c919061524d565b6001600160401b0381111561274357612743614a05565b60405190808252806020026020018201604052801561276c578160200160208202803683370190505b509450600086600001518960200151898151811061278c5761278c615208565b60200260200101518a60800151516127a491906154fd565b6127ae919061524d565b6001600160401b038111156127c5576127c5614a05565b6040519080825280602002602001820160405280156127ee578160200160208202803683370190505b509050600087608001518a60a001518a8151811061280e5761280e615208565b60200260200101518b60c001515161282691906154fd565b612830919061524d565b6001600160401b0381111561284757612847614a05565b604051908082528060200260200182016040528015612870578160200160208202803683370190505b50905060008860c001518b60e001518b8151811061289057612890615208565b60200260200101518c6101000151516128a991906154fd565b6128b3919061524d565b6001600160401b038111156128ca576128ca614a05565b6040519080825280602002602001820160405280156128f3578160200160208202803683370190505b508b51519091508a90612908906001906154fd565b8b03612f6e5760005b81811015612966578c60200151818151811061292f5761292f615208565b602002602001015189828151811061294957612949615208565b60209081029190910101528061295e81615234565b915050612911565b50896000015188828151811061297e5761297e615208565b60200260200101818152505060005b818110156129e2578c60a0015181815181106129ab576129ab615208565b60200260200101518882815181106129c5576129c5615208565b6020908102919091010152806129da81615234565b91505061298d565b5089608001518782815181106129fa576129fa615208565b60200260200101818152505060005b81811015612a5e578c60e001518181518110612a2757612a27615208565b6020026020010151878281518110612a4157612a41615208565b602090810291909101015280612a5681615234565b915050612a09565b508960c00151868281518110612a7657612a76615208565b6020908102919091010152506000805b8b811015612acb578c602001518181518110612aa457612aa4615208565b602002602001015182612ab7919061524d565b915080612ac381615234565b915050612a86565b5060005b81811015612b31578c604001518181518110612aed57612aed615208565b6020026020010151868281518110612b0757612b07615208565b6001600160a01b039092166020928302919091019091015280612b2981615234565b915050612acf565b5060005b8a51811015612ba3578a602001518181518110612b5457612b54615208565b6020026020010151868383612b69919061524d565b81518110612b7957612b79615208565b6001600160a01b039092166020928302919091019091015280612b9b81615234565b915050612b35565b5060005b81811015612c13578c606001518181518110612bc557612bc5615208565b6020026020010151612bd690615260565b8a8281518110612be857612be8615208565b6001600160e01b03199092166020928302919091019091015280612c0b81615234565b915050612ba7565b5060005b8a51811015612c8d578a604001518181518110612c3657612c36615208565b6020026020010151612c4790615260565b8a612c52848461524d565b81518110612c6257612c62615208565b6001600160e01b03199092166020928302919091019091015280612c8581615234565b915050612c17565b5060005b81811015612ce6578c608001518181518110612caf57612caf615208565b6020026020010151858281518110612cc957612cc9615208565b602090810291909101015280612cde81615234565b915050612c91565b5060005b8a51811015612d4b578a606001518181518110612d0957612d09615208565b6020026020010151858383612d1e919061524d565b81518110612d2e57612d2e615208565b602090810291909101015280612d4381615234565b915050612cea565b506000905060005b8b811015612d98578c60a001518181518110612d7157612d71615208565b602002602001015182612d84919061524d565b915080612d9081615234565b915050612d53565b5060005b81811015612df1578c60c001518181518110612dba57612dba615208565b6020026020010151848281518110612dd457612dd4615208565b602090810291909101015280612de981615234565b915050612d9c565b5060005b8a60800151811015612e59578a60a001518181518110612e1757612e17615208565b6020026020010151848383612e2c919061524d565b81518110612e3c57612e3c615208565b602090810291909101015280612e5181615234565b915050612df5565b506000905060005b8b811015612ea6578c60e001518181518110612e7f57612e7f615208565b602002602001015182612e92919061524d565b915080612e9e81615234565b915050612e61565b5060005b81811015612f00578c61010001518181518110612ec957612ec9615208565b6020026020010151838281518110612ee357612ee3615208565b602090810291909101015280612ef881615234565b915050612eaa565b5060005b8a60c00151811015612f68578a60e001518181518110612f2657612f26615208565b6020026020010151838383612f3b919061524d565b81518110612f4b57612f4b615208565b602090810291909101015280612f6081615234565b915050612f04565b50613a7a565b60005b81811015612fc6578c602001518181518110612f8f57612f8f615208565b6020026020010151898281518110612fa957612fa9615208565b602090810291909101015280612fbe81615234565b915050612f71565b508960000151888281518110612fde57612fde615208565b60209081029190910101526000612ff682600161524d565b90505b8c6020015151811015613053578c60200151818151811061301c5761301c615208565b602002602001015189828151811061303657613036615208565b60209081029190910101528061304b81615234565b915050612ff9565b5060005b818110156130ac578c60a00151818151811061307557613075615208565b602002602001015188828151811061308f5761308f615208565b6020908102919091010152806130a481615234565b915050613057565b5089608001518782815181106130c4576130c4615208565b602090810291909101015260006130dc82600161524d565b90505b8c60a0015151811015613139578c60a00151818151811061310257613102615208565b602002602001015188828151811061311c5761311c615208565b60209081029190910101528061313181615234565b9150506130df565b5060005b81811015613192578c60e00151818151811061315b5761315b615208565b602002602001015187828151811061317557613175615208565b60209081029190910101528061318a81615234565b91505061313d565b508960c001518682815181106131aa576131aa615208565b602090810291909101015260006131c282600161524d565b90505b8c60e001515181101561321f578c60e0015181815181106131e8576131e8615208565b602002602001015187828151811061320257613202615208565b60209081029190910101528061321781615234565b9150506131c5565b50600080915060005b8d515181101561327a578c810361323d578192505b8d60200151818151811061325357613253615208565b602002602001015182613266919061524d565b91508061327281615234565b915050613228565b5060008d602001518d8151811061329357613293615208565b6020026020010151836132a6919061524d565b905060005b8381101561330d578e6040015181815181106132c9576132c9615208565b60200260200101518882815181106132e3576132e3615208565b6001600160a01b03909216602092830291909101909101528061330581615234565b9150506132ab565b5060005b8c5181101561337f578c60200151818151811061333057613330615208565b6020026020010151888583613345919061524d565b8151811061335557613355615208565b6001600160a01b03909216602092830291909101909101528061337781615234565b915050613311565b5060005b61338d82846154fd565b8110156134115760408f01516133a3828461524d565b815181106133b3576133b3615208565b6020026020010151888e6000015186846133cd919061524d565b6133d7919061524d565b815181106133e7576133e7615208565b6001600160a01b03909216602092830291909101909101528061340981615234565b915050613383565b5060005b83811015613481578e60600151818151811061343357613433615208565b602002602001015161344490615260565b8c828151811061345657613456615208565b6001600160e01b0319909216602092830291909101909101528061347981615234565b915050613415565b5060005b8c518110156134fb578c6040015181815181106134a4576134a4615208565b60200260200101516134b590615260565b8c6134c0868461524d565b815181106134d0576134d0615208565b6001600160e01b031990921660209283029190910190910152806134f381615234565b915050613485565b5060005b61350982846154fd565b8110156135935760608f015161351f828461524d565b8151811061352f5761352f615208565b602002602001015161354090615260565b8d518d9061354e878561524d565b613558919061524d565b8151811061356857613568615208565b6001600160e01b0319909216602092830291909101909101528061358b81615234565b9150506134ff565b5060005b838110156135ec578e6080015181815181106135b5576135b5615208565b60200260200101518782815181106135cf576135cf615208565b6020908102919091010152806135e481615234565b915050613597565b5060005b8c51811015613651578c60600151818151811061360f5761360f615208565b6020026020010151878583613624919061524d565b8151811061363457613634615208565b60209081029190910101528061364981615234565b9150506135f0565b5060005b61365f82846154fd565b8110156136d65760808f0151613675828461524d565b8151811061368557613685615208565b6020026020010151878e60000151868461369f919061524d565b6136a9919061524d565b815181106136b9576136b9615208565b6020908102919091010152806136ce81615234565b915050613655565b50600091506000925060005b8e5151811015613734578d81036136f7578293505b8e60a00151818151811061370d5761370d615208565b602002602001015183613720919061524d565b92508061372c81615234565b9150506136e2565b508d60a001518d8151811061374b5761374b615208565b60200260200101518361375e919061524d565b905060005b838110156137b8578e60c00151818151811061378157613781615208565b602002602001015186828151811061379b5761379b615208565b6020908102919091010152806137b081615234565b915050613763565b5060005b8c60800151811015613820578c60a0015181815181106137de576137de615208565b60200260200101518685836137f3919061524d565b8151811061380357613803615208565b60209081029190910101528061381881615234565b9150506137bc565b5060005b61382e82846154fd565b8110156138a55760c08f0151613844828461524d565b8151811061385457613854615208565b6020026020010151868e60800151868461386e919061524d565b613878919061524d565b8151811061388857613888615208565b60209081029190910101528061389d81615234565b915050613824565b50600091506000925060005b8e5151811015613903578d81036138c6578293505b8e60e0015181815181106138dc576138dc615208565b6020026020010151836138ef919061524d565b9250806138fb81615234565b9150506138b1565b508d60e001518d8151811061391a5761391a615208565b60200260200101518361392d919061524d565b905060005b83811015613988578e6101000151818151811061395157613951615208565b602002602001015185828151811061396b5761396b615208565b60209081029190910101528061398081615234565b915050613932565b5060005b8c60c001518110156139f0578c60e0015181815181106139ae576139ae615208565b60200260200101518585836139c3919061524d565b815181106139d3576139d3615208565b6020908102919091010152806139e881615234565b91505061398c565b5060005b6139fe82846154fd565b811015613a76576101008f0151613a15828461524d565b81518110613a2557613a25615208565b6020026020010151858e60c001518684613a3f919061524d565b613a49919061524d565b81518110613a5957613a59615208565b602090810291909101015280613a6e81615234565b9150506139f4565b5050505b8b51604051613a9c91908a9088908d9089908d908a908e908b906020016152ed565b60408051601f198184030181529082905280516020909101206008558c517fdf3782d38af4ae54183a27faea5e61e7d27832f0f7df356a318c7fb9be2b553d916109e991908b9089908e908a908e908b908f908c906153b3565b613afe613bc5565b6001600160a01b038116613b635760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104a9565b613b6c816143ad565b50565b613b77613bc5565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f65c06354eb3fcefa304d7f9e42b42755fb21798520591cfbd099ef50d24f0dcd90602001610b7e565b6000546001600160a01b03163314611b4d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104a9565b606081516001600160401b03811115613c3a57613c3a614a05565b604051908082528060200260200182016040528015613c63578160200160208202803683370190505b50905060005b8251811015613cd257828181518110613c8457613c84615208565b6020026020010151613c9590615260565b828281518110613ca757613ca7615208565b6001600160e01b03199092166020928302919091019091015280613cca81615234565b915050613c69565b50919050565b8151602080840151604080860151608087015160a088015160c089015160e08a01516101008b01519551613d13999895968b969091016152ed565b6040516020818303038152906040528051906020012060001c60085414613d655760405162461bcd60e51b81526004016104a9906020808252600490820152634441544160e01b604082015260600190565b5050565b6020810151518151148015613d8357506040810151518151145b8015613d9457506060810151518151145b8015613da857508060a00151518160800151145b8015613dbc57508060e00151518160c00151145b613df45760405162461bcd60e51b815260206004820152600960248201526820a92920acafa622a760b91b60448201526064016104a9565b60005b8151811015613d6557600082602001518281518110613e1857613e18615208565b60200260200101516001600160a01b031683604001518381518110613e3f57613e3f615208565b6020026020010151604051613e5491906154ba565b6000604051808303816000865af19150503d8060008114613e91576040519150601f19603f3d011682016040523d82523d6000602084013e613e96565b606091505b5090915050600181151514613ed85760405162461bcd60e51b815260206004820152600860248201526743414c4c4441544160c01b60448201526064016104a9565b5080613ee381615234565b915050613df7565b606082516001613efb919061524d565b6001600160401b03811115613f1257613f12614a05565b604051908082528060200260200182016040528015613f3b578160200160208202803683370190505b50905060005b8351811015613f9357838181518110613f5c57613f5c615208565b6020026020010151828281518110613f7657613f76615208565b602090810291909101015280613f8b81615234565b915050613f41565b508181845181518110613fa857613fa8615208565b60200260200101818152505092915050565b606081518351613fca919061524d565b6001600160401b03811115613fe157613fe1614a05565b60405190808252806020026020018201604052801561400a578160200160208202803683370190505b50905060005b83518110156140625783818151811061402b5761402b615208565b602002602001015182828151811061404557614045615208565b60209081029190910101528061405a81615234565b915050614010565b50825160005b83518110156140c55783818151811061408357614083615208565b6020026020010151838383614098919061524d565b815181106140a8576140a8615208565b6020908102919091010152806140bd81615234565b915050614068565b505092915050565b60008060005b602081101561412a576140e781600861566a565b856140f2838761524d565b8151811061410257614102615208565b01602001516001600160f81b031916901c91909117908061412281615234565b9150506140d3565b5090505b92915050565b600e546001600160a01b0316806141485750565b600d54600f54604051630502c30760e51b81526000926001600160a01b038086169363a05860e09361418c939092169130916001600160d81b031690600401615510565b602060405180830381865afa1580156141a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141cd919061553c565b604051636bc1609560e01b8152600481018290529091506001600160a01b03831690636bc1609590602401602060405180830381865afa158015614215573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614239919061553c565b600003614244575050565b6000826001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142a89190615681565b600d54600f546040516305e959b960e21b81529293506001600160a01b03808716936317a566e4936142ed9392169130916001600160d81b0390911690600401615510565b600060405180830381600087803b15801561430757600080fd5b505af115801561431b573d6000803e3d6000fd5b50506040516370a0823160e01b8152306004820152600092506001600160a01b03841691506370a0823190602401602060405180830381865afa158015614366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061438a919061553c565b6005549091506143a7906001600160a01b038481169116836146ec565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600081516001600160401b0381111561441857614418614a05565b604051908082528060200260200182016040528015614441578160200160208202803683370190505b50905060008060005b84518110156145505784818151811061446557614465615208565b60200260200101516001600160a01b03166301e1d1146040518163ffffffff1660e01b8152600401602060405180830381865afa1580156144aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144ce919061553c565b8482815181106144e0576144e0615208565b6020026020010181815250508381815181106144fe576144fe615208565b602002602001015183614511919061524d565b92506004818154811061452657614526615208565b90600052602060002001548261453c919061524d565b91508061454881615234565b91505061444a565b508060000361457257825161456c9060049060208601906149a5565b506143a7565b81811161463257600061458582846154fd565b905060005b855181101561462b57600083600483815481106145a9576145a9615208565b90600052602060002001546001546145c1919061566a565b6145cb919061569e565b6001549091506145db848361566a565b6145e5919061569e565b600483815481106145f8576145f8615208565b906000526020600020016000828254614611919061524d565b90915550829150614623905081615234565b91505061458a565b50506143a7565b600061463e83836154fd565b905060005b85518110156146e4576000836004838154811061466257614662615208565b906000526020600020015460015461467a919061566a565b614684919061569e565b600154909150614694848361566a565b61469e919061569e565b600483815481106146b1576146b1615208565b9060005260206000200160008282546146ca91906154fd565b909155508291506146dc905081615234565b915050614643565b505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261473e908490614743565b505050565b6000614798826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166148159092919063ffffffff16565b80519091501561473e57808060200190518101906147b69190615609565b61473e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104a9565b6060614824848460008561482c565b949350505050565b60608247101561488d5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104a9565b600080866001600160a01b031685876040516148a991906154ba565b60006040518083038185875af1925050503d80600081146148e6576040519150601f19603f3d011682016040523d82523d6000602084013e6148eb565b606091505b50915091506148fc87838387614907565b979650505050505050565b6060831561497657825160000361496f576001600160a01b0385163b61496f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104a9565b5081614824565b614824838381511561498b5781518083602001fd5b8060405162461bcd60e51b81526004016104a991906156c0565b8280548282559060005260206000209081019282156149e0579160200282015b828111156149e05782518255916020019190600101906149c5565b506149ec9291506149f0565b5090565b5b808211156149ec57600081556001016149f1565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b0381118282101715614a3e57614a3e614a05565b60405290565b60405161010081016001600160401b0381118282101715614a3e57614a3e614a05565b604051601f8201601f191681016001600160401b0381118282101715614a8f57614a8f614a05565b604052919050565b60006001600160401b03821115614ab057614ab0614a05565b5060051b60200190565b6001600160a01b0381168114613b6c57600080fd5b600082601f830112614ae057600080fd5b81356020614af5614af083614a97565b614a67565b82815260059290921b84018101918181019086841115614b1457600080fd5b8286015b84811015614b38578035614b2b81614aba565b8352918301918301614b18565b509695505050505050565b600082601f830112614b5457600080fd5b81356020614b64614af083614a97565b82815260059290921b84018101918181019086841115614b8357600080fd5b8286015b84811015614b385780358352918301918301614b87565b6000601f8381840112614bb057600080fd5b82356020614bc0614af083614a97565b82815260059290921b85018101918181019087841115614bdf57600080fd5b8287015b84811015614c755780356001600160401b0380821115614c035760008081fd5b818a0191508a603f830112614c185760008081fd5b85820135604082821115614c2e57614c2e614a05565b614c3f828b01601f19168901614a67565b92508183528c81838601011115614c565760008081fd5b8181850189850137506000908201870152845250918301918301614be3565b50979650505050505050565b60006101208284031215614c9457600080fd5b614c9c614a1b565b905081356001600160401b0380821115614cb557600080fd5b614cc185838601614acf565b83526020840135915080821115614cd757600080fd5b614ce385838601614b43565b60208401526040840135915080821115614cfc57600080fd5b614d0885838601614acf565b60408401526060840135915080821115614d2157600080fd5b614d2d85838601614b9e565b60608401526080840135915080821115614d4657600080fd5b614d5285838601614b43565b608084015260a0840135915080821115614d6b57600080fd5b614d7785838601614b43565b60a084015260c0840135915080821115614d9057600080fd5b614d9c85838601614b43565b60c084015260e0840135915080821115614db557600080fd5b614dc185838601614b43565b60e084015261010091508184013581811115614ddc57600080fd5b614de886828701614b43565b8385015250505092915050565b60006101008284031215614e0857600080fd5b614e10614a44565b90508135815260208201356001600160401b0380821115614e3057600080fd5b614e3c85838601614acf565b60208401526040840135915080821115614e5557600080fd5b614e6185838601614b9e565b60408401526060840135915080821115614e7a57600080fd5b614e8685838601614b43565b60608401526080840135608084015260a0840135915080821115614ea957600080fd5b614eb585838601614b43565b60a084015260c084013560c084015260e0840135915080821115614ed857600080fd5b50614ee584828501614b43565b60e08301525092915050565b600080600060608486031215614f0657600080fd5b83356001600160401b0380821115614f1d57600080fd5b614f2987838801614c81565b945060208601359150614f3b82614aba565b90925060408501359080821115614f5157600080fd5b50614f5e86828701614df5565b9150509250925092565b600080600060608486031215614f7d57600080fd5b83356001600160401b0380821115614f9457600080fd5b614fa087838801614acf565b94506020860135915080821115614fb657600080fd5b614fc287838801614b9e565b93506040860135915080821115614fd857600080fd5b50614f5e86828701614b43565b600081518084526020808501945080840160005b8381101561501557815187529582019590820190600101614ff9565b509495945050505050565b6020815260006150336020830184614fe5565b9392505050565b60006020828403121561504c57600080fd5b5035919050565b6000806040838503121561506657600080fd5b82356001600160401b0381111561507c57600080fd5b61508885828601614c81565b95602094909401359450505050565b6000806000606084860312156150ac57600080fd5b83356150b781614aba565b925060208401356150c781614aba565b915060408401356001600160d81b03811681146150e357600080fd5b809150509250925092565b60006020828403121561510057600080fd5b81356001600160401b0381111561511657600080fd5b61482484828501614b43565b85815260a06020820152600061513b60a0830187614fe5565b828103604084015261514d8187614fe5565b60608401959095525050608001529392505050565b60006020828403121561517457600080fd5b81356001600160401b0381111561518a57600080fd5b61482484828501614c81565b6000806000606084860312156151ab57600080fd5b83356001600160401b03808211156151c257600080fd5b6151ce87838801614c81565b9450602086013593506040860135915080821115614f5157600080fd5b6000602082840312156151fd57600080fd5b813561503381614aba565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016152465761524661521e565b5060010190565b8082018082111561412e5761412e61521e565b805160208201516001600160e01b0319808216929190600483101561528f5780818460040360031b1b83161693505b505050919050565b60008151602080840160005b838110156150155781516001600160a01b0316875295820195908201906001016152a3565b8051600090602080840183831561501557815187529582019590820190600101614ff9565b600061530b6153056152ff848e615297565b8c6152c8565b8a615297565b88516020808b0160005b8381101561533b5781516001600160e01b03191685529382019390820190600101615315565b5050505061536d61536761536161535b615355858d6152c8565b8b6152c8565b896152c8565b876152c8565b856152c8565b9c9b505050505050505050505050565b8051808352602092830192600091908084018383156150155781516001600160a01b0316875295820195908201906001016152a3565b60006101208083526153c78184018d61537d565b90506020838203818501526153dc828d614fe5565b915083820360408501526153f0828c61537d565b84810360608601528a51808252828c0193509082019060005b8181101561542f5784516001600160e01b03191683529383019391830191600101615409565b50508481036080860152615443818b614fe5565b9250505082810360a08401526154598188614fe5565b905082810360c084015261546d8187614fe5565b905082810360e08401526154818186614fe5565b905082810361010084015261536d8185614fe5565b60005b838110156154b1578181015183820152602001615499565b50506000910152565b600082516154cc818460208701615496565b9190910192915050565b6020808252600d908201526c4e4f5f5354524154454749455360981b604082015260600190565b8181038181111561412e5761412e61521e565b6001600160a01b0393841681529190921660208201526001600160d81b03909116604082015260600190565b60006020828403121561554e57600080fd5b5051919050565b600061557361556d61556784886152c8565b866152c8565b846152c8565b95945050505050565b60808152600061558f6080830187614fe5565b6020838203818501526155a28288614fe5565b915083820360408501526155b68287614fe5565b8481036060860152855480825260008781528381209450918301915b818110156155ee578454835260019485019492840192016155d2565b50909998505050505050505050565b600061503382846152c8565b60006020828403121561561b57600080fd5b8151801515811461503357600080fd5b85815260a06020820152600061564460a0830187614fe5565b6001600160a01b0395909516604083015250606081019290925260809091015292915050565b808202811582820484141761412e5761412e61521e565b60006020828403121561569357600080fd5b815161503381614aba565b6000826156bb57634e487b7160e01b600052601260045260246000fd5b500490565b60208152600082518060208401526156df816040850160208701615496565b601f01601f1916919091016040019291505056fea264697066735822122048b37f8e92556a4a2e2029b6b2af9e6aeeb987345f15980544dfb2e8117f17f064736f6c63430008110033"},"sourceId":"DebtAllocator.sol","userdoc":{"kind":"user","methods":{},"version":1}},"ICairoVerifier":{"abi":[{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"isValid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"contractName":"ICairoVerifier","deploymentBytecode":{},"devdoc":{"kind":"dev","methods":{},"version":1},"runtimeBytecode":{},"sourceId":"DebtAllocator.sol","userdoc":{"kind":"user","methods":{},"version":1}},"IStrategy":{"abi":[{"inputs":[],"name":"apiVersion","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"totalAssets","outputs":[{"internalType":"uint256","name":"_totalAssets","type":"uint256"}],"stateMutability":"view","type":"function"}],"contractName":"IStrategy","deploymentBytecode":{},"devdoc":{"kind":"dev","methods":{},"version":1},"runtimeBytecode":{},"sourceId":"DebtAllocator.sol","userdoc":{"kind":"user","methods":{},"version":1}},"IStreamer":{"abi":[{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint216","name":"amountPerSec","type":"uint216"}],"name":"getStreamId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"streamToStart","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint216","name":"amountPerSec","type":"uint216"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"contractName":"IStreamer","deploymentBytecode":{},"devdoc":{"kind":"dev","methods":{},"version":1},"runtimeBytecode":{},"sourceId":"DebtAllocator.sol","userdoc":{"kind":"user","methods":{},"version":1}},"MockStrategy":{"abi":[{"inputs":[],"name":"apiVersion","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"updateTotalAssets","outputs":[],"stateMutability":"nonpayable","type":"function"}],"contractName":"MockStrategy","deploymentBytecode":{"bytecode":"0x608060405260026000556802b5e3af16b188000060015534801561002257600080fd5b5060ac806100316000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c806301e1d1141460415780632582941014605b578063d033cb4d146063575b600080fd5b604960015481565b60405190815260200160405180910390f35b604960005481565b6074681b1ae4d6e2ef500000600155565b00fea264697066735822122008877320ad51714ad1797f86cb565063e3d801ea73c7d64983cc77ed3da3ed1264736f6c63430008110033"},"devdoc":{"kind":"dev","methods":{},"version":1},"runtimeBytecode":{"bytecode":"0x608060405260026000556802b5e3af16b188000060015534801561002257600080fd5b5060ac806100316000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c806301e1d1141460415780632582941014605b578063d033cb4d146063575b600080fd5b604960015481565b60405190815260200160405180910390f35b604960005481565b6074681b1ae4d6e2ef500000600155565b00fea264697066735822122008877320ad51714ad1797f86cb565063e3d801ea73c7d64983cc77ed3da3ed1264736f6c63430008110033"},"sourceId":"MockStrategy1.sol","userdoc":{"kind":"user","methods":{},"version":1}},"MockStrategy2":{"abi":[{"inputs":[],"name":"apiVersion","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"updateTotalAssets","outputs":[],"stateMutability":"nonpayable","type":"function"}],"contractName":"MockStrategy2","deploymentBytecode":{"bytecode":"0x60806040526002600055678ac7230489e8000060015534801561002157600080fd5b5060ac806100306000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c806301e1d1141460415780632582941014605b578063d033cb4d146063575b600080fd5b604960015481565b60405190815260200160405180910390f35b604960005481565b6074681b1ae4d6e2ef500000600155565b00fea26469706673582212208321ce7987a875ce7efeb262d140a718052ad5e8453910300f0bd3d0a92addff64736f6c63430008110033"},"devdoc":{"kind":"dev","methods":{},"version":1},"runtimeBytecode":{"bytecode":"0x60806040526002600055678ac7230489e8000060015534801561002157600080fd5b5060ac806100306000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c806301e1d1141460415780632582941014605b578063d033cb4d146063575b600080fd5b604960015481565b60405190815260200160405180910390f35b604960005481565b6074681b1ae4d6e2ef500000600155565b00fea26469706673582212208321ce7987a875ce7efeb262d140a718052ad5e8453910300f0bd3d0a92addff64736f6c63430008110033"},"sourceId":"MockStrategy1.sol","userdoc":{"kind":"user","methods":{},"version":1}},"MockStrategyData1":{"abi":[{"inputs":[],"name":"first_data","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"second_data","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"contractName":"MockStrategyData1","deploymentBytecode":{"bytecode":"0x6080604052600b600055606f600155348015601957600080fd5b50608f806100286000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80639c47575f146037578063dd384acb146051575b600080fd5b603f60015481565b60405190815260200160405180910390f35b603f6000548156fea26469706673582212205437edf886fdf36378eef358fbf16c70ceadc6edbe411fc90659be21707c651164736f6c63430008110033"},"devdoc":{"kind":"dev","methods":{},"version":1},"runtimeBytecode":{"bytecode":"0x6080604052600b600055606f600155348015601957600080fd5b50608f806100286000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80639c47575f146037578063dd384acb146051575b600080fd5b603f60015481565b60405190815260200160405180910390f35b603f6000548156fea26469706673582212205437edf886fdf36378eef358fbf16c70ceadc6edbe411fc90659be21707c651164736f6c63430008110033"},"sourceId":"MockStrategyData1.sol","userdoc":{"kind":"user","methods":{},"version":1}},"MockStrategyData2":{"abi":[{"inputs":[],"name":"first_data","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"second_data","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"contractName":"MockStrategyData2","deploymentBytecode":{"bytecode":"0x6080604052601660005560de600155348015601957600080fd5b50608f806100286000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80639c47575f146037578063dd384acb146051575b600080fd5b603f60015481565b60405190815260200160405180910390f35b603f6000548156fea2646970667358221220266dda5ccc1cad28d1a41c8620391ff2183250a2d2d61e5f380104f74d11abc064736f6c63430008110033"},"devdoc":{"kind":"dev","methods":{},"version":1},"runtimeBytecode":{"bytecode":"0x6080604052601660005560de600155348015601957600080fd5b50608f806100286000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80639c47575f146037578063dd384acb146051575b600080fd5b603f60015481565b60405190815260200160405180910390f35b603f6000548156fea2646970667358221220266dda5ccc1cad28d1a41c8620391ff2183250a2d2d61e5f380104f74d11abc064736f6c63430008110033"},"sourceId":"MockStrategyData2.sol","userdoc":{"kind":"user","methods":{},"version":1}}},"manifest":"ethpm/3","sources":{"DebtAllocator.sol":{"checksum":{"algorithm":"md5","hash":"0xd1d3575e3854c26facb110e44642320a"},"content":"//SPDX-License-Identifier: UNLICENSED\n\nimport \"@openzeppelin/access/Ownable.sol\";\nimport \"@openzeppelin/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/token/ERC20/utils/SafeERC20.sol\";\n\npragma solidity >=0.7.0 <0.9.0;\n\ninterface ICairoVerifier {\n    function isValid(bytes32) external view returns (bool);\n}\n\ninterface IStreamer {\n    function token() external view returns (IERC20);\n\n    function streamToStart(bytes32) external view returns (uint256);\n\n    function withdraw(address from, address to, uint216 amountPerSec) external;\n\n    function getStreamId(\n        address from,\n        address to,\n        uint216 amountPerSec\n    ) external view returns (bytes32);\n}\n\ninterface IStrategy {\n    function apiVersion() external pure returns (uint256);\n\n    function totalAssets() external view returns (uint256 _totalAssets);\n}\n\ncontract DebtAllocator is Ownable {\n    using SafeERC20 for IERC20;\n\n    uint256 PRECISION = 10 ** 18;\n\n    ICairoVerifier public cairoVerifier = ICairoVerifier(address(0));\n    bytes32 public cairoProgramHash = 0x0;\n\n    struct PackedStrategies {\n        address[] addresses;\n        uint256[] callLen;\n        address[] contracts;\n        bytes[] checkdata;\n        uint256[] offset;\n        uint256[] calculationsLen;\n        uint256[] calculations;\n        uint256[] conditionsLen;\n        uint256[] conditions;\n    }\n\n    struct StrategyParam {\n        uint256 callLen;\n        address[] contracts;\n        bytes[] checkdata;\n        uint256[] offset;\n        uint256 calculationsLen;\n        uint256[] calculations;\n        uint256 conditionsLen;\n        uint256[] conditions;\n    }\n\n    uint256[] public targetAllocation;\n\n    // Everyone is free to propose a new solution, the address is stored so the user can get rewarded\n    address public proposer;\n    uint256 public proposerPerformance;\n    uint256 public lastUpdate;\n    uint256 public strategiesHash;\n    uint256 public inputHash;\n    mapping(uint256 => uint256) public snapshotTimestamp;\n\n    uint256 public staleSnapshotPeriod = 24 * 3600;\n    uint256 public stalePeriod = 24 * 3600;\n\n    // Rewards config\n    address public rewardsPayer;\n    address public rewardsStreamer;\n    uint216 public rewardsPerSec;\n\n    // 100% APY = 10^27, minimum increased = 10^23 = 0,01%\n    uint256 public minimumApyIncreaseForNewSolution = 100000000000000000000000;\n\n    constructor(address _cairoVerifier, bytes32 _cairoProgramHash) payable {}\n\n    event StrategyAdded(\n        address[] Strategies,\n        uint256[] StrategiesCallLen,\n        address[] Contracts,\n        bytes4[] Checkdata,\n        uint256[] Offset,\n        uint256[] CalculationsLen,\n        uint256[] Calculations,\n        uint256[] ConditionsLen,\n        uint256[] Conditions\n    );\n    event StrategyUpdated(\n        address[] Strategies,\n        uint256[] StrategiesCallLen,\n        address[] Contracts,\n        bytes4[] Checkdata,\n        uint256[] Offset,\n        uint256[] CalculationsLen,\n        uint256[] Calculations,\n        uint256[] ConditionsLen,\n        uint256[] Conditions\n    );\n    event StrategyRemoved(\n        address[] Strategies,\n        uint256[] StrategiesCallLen,\n        address[] Contracts,\n        bytes4[] Checkdata,\n        uint256[] Offset,\n        uint256[] CalculationsLen,\n        uint256[] Calculations,\n        uint256[] ConditionsLen,\n        uint256[] Conditions\n    );\n\n    event NewSnapshot(\n        uint256[] dataStrategies,\n        uint256[] calculation,\n        uint256[] condition,\n        uint256[] targetAllocations\n    );\n    event NewSolution(\n        uint256 newApy,\n        uint256[] newTargetAllocation,\n        address proposer,\n        uint256 proposerPerformance,\n        uint256 timestamp\n    );\n\n    event NewCairoProgramHash(bytes32 newCairoProgramHash);\n    event NewCairoVerifier(address newCairoVerifier);\n    event NewStalePeriod(uint256 newStalePeriod);\n    event NewStaleSnapshotPeriod(uint256 newStaleSnapshotPeriod);\n\n    // event targetAllocationForced(uint256[] newTargetAllocation);\n\n    function updateRewardsConfig(\n        address _rewardsPayer,\n        address _rewardsStreamer,\n        uint216 _rewardsPerSec\n    ) external onlyOwner {\n        bytes32 streamId = IStreamer(_rewardsStreamer).getStreamId(\n            _rewardsPayer,\n            address(this),\n            _rewardsPerSec\n        );\n        require(\n            IStreamer(_rewardsStreamer).streamToStart(streamId) > 0,\n            \"STREAM\"\n        );\n        rewardsPayer = _rewardsPayer;\n        rewardsStreamer = _rewardsStreamer;\n        rewardsPerSec = _rewardsPerSec;\n    }\n\n    function updateCairoProgramHash(\n        bytes32 _cairoProgramHash\n    ) public onlyOwner {\n        cairoProgramHash = _cairoProgramHash;\n        emit NewCairoProgramHash(_cairoProgramHash);\n    }\n\n    function updateCairoVerifier(address _cairoVerifier) public onlyOwner {\n        cairoVerifier = ICairoVerifier(_cairoVerifier);\n        emit NewCairoVerifier(_cairoVerifier);\n    }\n\n    function updateStalePeriod(uint256 _stalePeriod) external onlyOwner {\n        stalePeriod = _stalePeriod;\n        emit NewStalePeriod(_stalePeriod);\n    }\n\n    function updateStaleSnapshotPeriod(\n        uint256 _staleSnapshotPeriod\n    ) external onlyOwner {\n        staleSnapshotPeriod = _staleSnapshotPeriod;\n        emit NewStaleSnapshotPeriod(_staleSnapshotPeriod);\n    }\n\n    // function forceTargetAllocation(uint256[] memory _newTargetAllocation) public onlyOwner whenPaused {\n    //     require(strategiesHash != 0, \"NO_STRATEGIES\");\n    //     require(_newTargetAllocation.length == targetAllocation.length, \"LENGTH\");\n    //     for(uint256 j; j < _newTargetAllocation.length; j++) {\n    //         targetAllocation[j] = _newTargetAllocation[j];\n    //     }\n    //     emit targetAllocationForced(_newTargetAllocation);\n    // }\n\n    function addStrategy(\n        PackedStrategies memory _packedStrategies,\n        address _newStrategy,\n        StrategyParam memory _newStrategyParam\n    ) external onlyOwner {\n        // Checks previous strategies data valid\n        bytes4[] memory checkdata = castCheckdataToBytes4(\n            _packedStrategies.checkdata\n        );\n\n        if (strategiesHash != 0) {\n            checkStrategyHash(_packedStrategies, checkdata);\n        } else {\n            require(_packedStrategies.addresses.length == 0, \"FIRST_DATA\");\n        }\n\n        for (uint256 i = 0; i < _packedStrategies.addresses.length; i++) {\n            if (_packedStrategies.addresses[i] == _newStrategy) {\n                revert(\"STRATEGY_EXISTS\");\n            }\n        }\n\n        // Checks call data valid\n        checkValidityOfData(_newStrategyParam);\n\n        // Build new arrays for the Strategy Hash and the Event        address[] memory strategies = new address[](_packedStrategies.addresses.length + 1);\n        address[] memory strategies = new address[](\n            _packedStrategies.addresses.length + 1\n        );\n        for (uint256 i = 0; i < _packedStrategies.addresses.length; i++) {\n            strategies[i] = _packedStrategies.addresses[i];\n        }\n        strategies[_packedStrategies.addresses.length] = _newStrategy;\n\n        uint256[] memory strategiesCallLen = appendUint256ToArray(\n            _packedStrategies.callLen,\n            _newStrategyParam.callLen\n        );\n\n        address[] memory contracts = new address[](\n            _packedStrategies.contracts.length + _newStrategyParam.callLen\n        );\n        for (uint256 i = 0; i < _packedStrategies.contracts.length; i++) {\n            contracts[i] = _packedStrategies.contracts[i];\n        }\n        for (uint256 i = 0; i < _newStrategyParam.callLen; i++) {\n            contracts[\n                i + _packedStrategies.contracts.length\n            ] = _newStrategyParam.contracts[i];\n        }\n\n        checkdata = new bytes4[](\n            _packedStrategies.checkdata.length + _newStrategyParam.callLen\n        );\n        for (uint256 i = 0; i < _packedStrategies.checkdata.length; i++) {\n            checkdata[i] = bytes4(_packedStrategies.checkdata[i]);\n        }\n\n        for (uint256 i = 0; i < _newStrategyParam.callLen; i++) {\n            checkdata[i + _packedStrategies.checkdata.length] = bytes4(\n                _newStrategyParam.checkdata[i]\n            );\n        }\n\n        uint256[] memory offset = concatenateUint256ArrayToUint256Array(\n            _packedStrategies.offset,\n            _newStrategyParam.offset\n        );\n\n        uint256[] memory calculationsLen = appendUint256ToArray(\n            _packedStrategies.calculationsLen,\n            _newStrategyParam.calculationsLen\n        );\n\n        uint256[] memory calculations = concatenateUint256ArrayToUint256Array(\n            _packedStrategies.calculations,\n            _newStrategyParam.calculations\n        );\n\n        uint256[] memory conditionsLen = appendUint256ToArray(\n            _packedStrategies.conditionsLen,\n            _newStrategyParam.conditionsLen\n        );\n\n        uint256[] memory conditions = concatenateUint256ArrayToUint256Array(\n            _packedStrategies.conditions,\n            _newStrategyParam.conditions\n        );\n\n        strategiesHash = uint256(\n            keccak256(\n                abi.encodePacked(\n                    strategies,\n                    strategiesCallLen,\n                    contracts,\n                    checkdata,\n                    offset,\n                    calculationsLen,\n                    calculations,\n                    conditionsLen,\n                    conditions\n                )\n            )\n        );\n\n        // New strategy allocation always set to 0, people can then send new solution\n        targetAllocation.push(0);\n\n        emit StrategyAdded(\n            strategies,\n            strategiesCallLen,\n            contracts,\n            checkdata,\n            offset,\n            calculationsLen,\n            calculations,\n            conditionsLen,\n            conditions\n        );\n    }\n\n    function updateStrategy(\n        PackedStrategies memory _packedStrategies,\n        uint256 indexStrategyToUpdate,\n        StrategyParam memory _newStrategyParam\n    ) external onlyOwner {\n        // Checks at least one strategy is registered\n        require(strategiesHash != 0, \"NO_STRATEGIES\");\n\n        // Checks strategies data is valid\n        bytes4[] memory checkdata = new bytes4[](\n            _packedStrategies.checkdata.length\n        );\n        for (uint256 i = 0; i < _packedStrategies.checkdata.length; i++) {\n            checkdata[i] = bytes4(_packedStrategies.checkdata[i]);\n        }\n        checkStrategyHash(_packedStrategies, checkdata);\n        // Checks index in range\n        require(\n            indexStrategyToUpdate < _packedStrategies.addresses.length,\n            \"INDEX_OUT_OF_RANGE\"\n        );\n\n        // Checks call data valid\n        require(\n            _newStrategyParam.callLen == _newStrategyParam.contracts.length &&\n                _newStrategyParam.callLen ==\n                _newStrategyParam.checkdata.length &&\n                _newStrategyParam.callLen == _newStrategyParam.offset.length &&\n                _newStrategyParam.calculationsLen ==\n                _newStrategyParam.calculations.length &&\n                _newStrategyParam.conditionsLen ==\n                _newStrategyParam.conditions.length,\n            \"ARRAY_LEN\"\n        );\n        for (uint256 i = 0; i < _newStrategyParam.callLen; i++) {\n            (bool success, ) = _newStrategyParam.contracts[i].call(\n                _newStrategyParam.checkdata[i]\n            );\n            require(success == true, \"CALLDATA\");\n            // Should we check for offset?\n        }\n\n        // Build new arrays for the Strategy Hash and the Event\n\n        uint256[] memory strategiesCallLen = new uint256[](\n            _packedStrategies.callLen.length\n        );\n        uint256[] memory calculationsLen = new uint256[](\n            _packedStrategies.calculationsLen.length\n        );\n        uint256[] memory conditionsLen = new uint256[](\n            _packedStrategies.conditionsLen.length\n        );\n        address[] memory contracts = new address[](\n            _packedStrategies.contracts.length -\n                _packedStrategies.callLen[indexStrategyToUpdate] +\n                _newStrategyParam.callLen\n        );\n        checkdata = new bytes4[](\n            _packedStrategies.checkdata.length -\n                _packedStrategies.callLen[indexStrategyToUpdate] +\n                _newStrategyParam.callLen\n        );\n        uint256[] memory offset = new uint256[](\n            _packedStrategies.offset.length -\n                _packedStrategies.callLen[indexStrategyToUpdate] +\n                _newStrategyParam.callLen\n        );\n        uint256[] memory calculations = new uint256[](\n            _packedStrategies.calculations.length -\n                _packedStrategies.calculationsLen[indexStrategyToUpdate] +\n                _newStrategyParam.calculationsLen\n        );\n        uint256[] memory conditions = new uint256[](\n            _packedStrategies.conditions.length -\n                _packedStrategies.conditionsLen[indexStrategyToUpdate] +\n                _newStrategyParam.conditionsLen\n        );\n        uint256 offsetCalldata = indexStrategyToUpdate;\n        if (indexStrategyToUpdate == _packedStrategies.addresses.length - 1) {\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                strategiesCallLen[i] = _packedStrategies.callLen[i];\n            }\n            strategiesCallLen[offsetCalldata] = _newStrategyParam.callLen;\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                calculationsLen[i] = _packedStrategies.calculationsLen[i];\n            }\n            calculationsLen[offsetCalldata] = _newStrategyParam.calculationsLen;\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                conditionsLen[i] = _packedStrategies.conditionsLen[i];\n            }\n            conditionsLen[offsetCalldata] = _newStrategyParam.conditionsLen;\n\n            offsetCalldata = 0;\n            for (uint256 i = 0; i < indexStrategyToUpdate; i++) {\n                offsetCalldata += _packedStrategies.callLen[i];\n            }\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                contracts[i] = _packedStrategies.contracts[i];\n            }\n            for (uint256 i = 0; i < _newStrategyParam.callLen; i++) {\n                contracts[i + offsetCalldata] = _newStrategyParam.contracts[i];\n            }\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                checkdata[i] = bytes4(_packedStrategies.checkdata[i]);\n            }\n            for (uint256 i = 0; i < _newStrategyParam.callLen; i++) {\n                checkdata[i + offsetCalldata] = bytes4(\n                    _newStrategyParam.checkdata[i]\n                );\n            }\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                offset[i] = _packedStrategies.offset[i];\n            }\n            for (uint256 i = 0; i < _newStrategyParam.callLen; i++) {\n                offset[i + offsetCalldata] = _newStrategyParam.offset[i];\n            }\n\n            offsetCalldata = 0;\n            for (uint256 i = 0; i < indexStrategyToUpdate; i++) {\n                offsetCalldata += _packedStrategies.calculationsLen[i];\n            }\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                calculations[i] = _packedStrategies.calculations[i];\n            }\n            for (uint256 i = 0; i < _newStrategyParam.calculationsLen; i++) {\n                calculations[i + offsetCalldata] = _newStrategyParam\n                    .calculations[i];\n            }\n\n            offsetCalldata = 0;\n            for (uint256 i = 0; i < indexStrategyToUpdate; i++) {\n                offsetCalldata += _packedStrategies.conditionsLen[i];\n            }\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                conditions[i] = _packedStrategies.conditions[i];\n            }\n            for (uint256 i = 0; i < _newStrategyParam.conditionsLen; i++) {\n                conditions[i + offsetCalldata] = _newStrategyParam.conditions[\n                    i\n                ];\n            }\n        } else {\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                strategiesCallLen[i] = _packedStrategies.callLen[i];\n            }\n            strategiesCallLen[offsetCalldata] = _newStrategyParam.callLen;\n            for (\n                uint256 i = offsetCalldata + 1;\n                i < _packedStrategies.callLen.length;\n                i++\n            ) {\n                strategiesCallLen[i] = _packedStrategies.callLen[i];\n            }\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                calculationsLen[i] = _packedStrategies.calculationsLen[i];\n            }\n            calculationsLen[offsetCalldata] = _newStrategyParam.calculationsLen;\n            for (\n                uint256 i = offsetCalldata + 1;\n                i < _packedStrategies.calculationsLen.length;\n                i++\n            ) {\n                calculationsLen[i] = _packedStrategies.calculationsLen[i];\n            }\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                conditionsLen[i] = _packedStrategies.conditionsLen[i];\n            }\n            conditionsLen[offsetCalldata] = _newStrategyParam.conditionsLen;\n            for (\n                uint256 i = offsetCalldata + 1;\n                i < _packedStrategies.conditionsLen.length;\n                i++\n            ) {\n                conditionsLen[i] = _packedStrategies.conditionsLen[i];\n            }\n\n            uint256 totalCallLen = 0;\n            offsetCalldata = 0;\n            for (uint256 i = 0; i < _packedStrategies.addresses.length; i++) {\n                if (i == indexStrategyToUpdate) {\n                    offsetCalldata = totalCallLen;\n                }\n                totalCallLen += _packedStrategies.callLen[i];\n            }\n            uint256 offsetCalldataAfter = offsetCalldata +\n                _packedStrategies.callLen[indexStrategyToUpdate];\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                contracts[i] = _packedStrategies.contracts[i];\n            }\n            for (uint256 i = 0; i < _newStrategyParam.callLen; i++) {\n                contracts[i + offsetCalldata] = _newStrategyParam.contracts[i];\n            }\n            for (uint256 i = 0; i < totalCallLen - offsetCalldataAfter; i++) {\n                contracts[\n                    i + offsetCalldata + _newStrategyParam.callLen\n                ] = _packedStrategies.contracts[offsetCalldataAfter + i];\n            }\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                checkdata[i] = bytes4(_packedStrategies.checkdata[i]);\n            }\n            for (uint256 i = 0; i < _newStrategyParam.callLen; i++) {\n                checkdata[i + offsetCalldata] = bytes4(\n                    _newStrategyParam.checkdata[i]\n                );\n            }\n            for (uint256 i = 0; i < totalCallLen - offsetCalldataAfter; i++) {\n                checkdata[\n                    i + offsetCalldata + _newStrategyParam.callLen\n                ] = bytes4(\n                    _packedStrategies.checkdata[offsetCalldataAfter + i]\n                );\n            }\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                offset[i] = _packedStrategies.offset[i];\n            }\n            for (uint256 i = 0; i < _newStrategyParam.callLen; i++) {\n                offset[i + offsetCalldata] = _newStrategyParam.offset[i];\n            }\n            for (uint256 i = 0; i < totalCallLen - offsetCalldataAfter; i++) {\n                offset[\n                    i + offsetCalldata + _newStrategyParam.callLen\n                ] = _packedStrategies.offset[offsetCalldataAfter + i];\n            }\n\n            totalCallLen = 0;\n            offsetCalldata = 0;\n            for (uint256 i = 0; i < _packedStrategies.addresses.length; i++) {\n                if (i == indexStrategyToUpdate) {\n                    offsetCalldata = totalCallLen;\n                }\n                totalCallLen += _packedStrategies.calculationsLen[i];\n            }\n            offsetCalldataAfter =\n                offsetCalldata +\n                _packedStrategies.calculationsLen[indexStrategyToUpdate];\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                calculations[i] = _packedStrategies.calculations[i];\n            }\n            for (uint256 i = 0; i < _newStrategyParam.calculationsLen; i++) {\n                calculations[i + offsetCalldata] = _newStrategyParam\n                    .calculations[i];\n            }\n            for (uint256 i = 0; i < totalCallLen - offsetCalldataAfter; i++) {\n                calculations[\n                    i + offsetCalldata + _newStrategyParam.calculationsLen\n                ] = _packedStrategies.calculations[offsetCalldataAfter + i];\n            }\n\n            totalCallLen = 0;\n            offsetCalldata = 0;\n            for (uint256 i = 0; i < _packedStrategies.addresses.length; i++) {\n                if (i == indexStrategyToUpdate) {\n                    offsetCalldata = totalCallLen;\n                }\n                totalCallLen += _packedStrategies.conditionsLen[i];\n            }\n            offsetCalldataAfter =\n                offsetCalldata +\n                _packedStrategies.conditionsLen[indexStrategyToUpdate];\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                conditions[i] = _packedStrategies.conditions[i];\n            }\n            for (uint256 i = 0; i < _newStrategyParam.conditionsLen; i++) {\n                conditions[i + offsetCalldata] = _newStrategyParam.conditions[\n                    i\n                ];\n            }\n            for (uint256 i = 0; i < totalCallLen - offsetCalldataAfter; i++) {\n                conditions[\n                    i + offsetCalldata + _newStrategyParam.conditionsLen\n                ] = _packedStrategies.conditions[offsetCalldataAfter + i];\n            }\n        }\n\n        strategiesHash = uint256(\n            keccak256(\n                abi.encodePacked(\n                    _packedStrategies.addresses,\n                    strategiesCallLen,\n                    contracts,\n                    checkdata,\n                    offset,\n                    calculationsLen,\n                    calculations,\n                    conditionsLen,\n                    conditions\n                )\n            )\n        );\n\n        emit StrategyUpdated(\n            _packedStrategies.addresses,\n            strategiesCallLen,\n            contracts,\n            checkdata,\n            offset,\n            calculationsLen,\n            calculations,\n            conditionsLen,\n            conditions\n        );\n    }\n\n    function removeStrategy(\n        PackedStrategies memory _packedStrategies,\n        uint256 indexStrategyToRemove\n    ) external onlyOwner {\n        // Checks at least one strategy is registered\n        require(strategiesHash != 0, \"NO_STRATEGIES\");\n\n        bytes4[] memory checkdata = castCheckdataToBytes4(\n            _packedStrategies.checkdata\n        );\n\n        // Checks strategies data is valid\n        checkStrategyHash(_packedStrategies, checkdata);\n\n        // Checks index in range\n        require(indexStrategyToRemove < _packedStrategies.addresses.length);\n\n        // Build new arrays for the Strategy Hash and the Event\n        uint256[] memory strategiesCallLen = new uint256[](\n            _packedStrategies.callLen.length - 1\n        );\n        uint256[] memory calculationsLen = new uint256[](\n            _packedStrategies.calculationsLen.length - 1\n        );\n        uint256[] memory conditionsLen = new uint256[](\n            _packedStrategies.conditionsLen.length - 1\n        );\n        address[] memory contracts = new address[](\n            _packedStrategies.contracts.length -\n                _packedStrategies.callLen[indexStrategyToRemove]\n        );\n        checkdata = new bytes4[](\n            _packedStrategies.checkdata.length -\n                _packedStrategies.callLen[indexStrategyToRemove]\n        );\n        uint256[] memory offset = new uint256[](\n            _packedStrategies.offset.length -\n                _packedStrategies.callLen[indexStrategyToRemove]\n        );\n        uint256[] memory calculations = new uint256[](\n            _packedStrategies.calculations.length -\n                _packedStrategies.calculationsLen[indexStrategyToRemove]\n        );\n        uint256[] memory conditions = new uint256[](\n            _packedStrategies.conditions.length -\n                _packedStrategies.conditionsLen[indexStrategyToRemove]\n        );\n        uint256 offsetCalldata = indexStrategyToRemove;\n        for (uint256 i = 0; i < offsetCalldata; i++) {\n            strategiesCallLen[i] = _packedStrategies.callLen[i];\n        }\n        for (\n            uint256 i = 0;\n            i < _packedStrategies.addresses.length - (offsetCalldata + 1);\n            i++\n        ) {\n            strategiesCallLen[offsetCalldata + i] = _packedStrategies.callLen[\n                offsetCalldata + 1 + i\n            ];\n        }\n        for (uint256 i = 0; i < offsetCalldata; i++) {\n            calculationsLen[i] = _packedStrategies.calculationsLen[i];\n        }\n        for (\n            uint256 i = 0;\n            i < _packedStrategies.addresses.length - (offsetCalldata + 1);\n            i++\n        ) {\n            calculationsLen[offsetCalldata + i] = _packedStrategies\n                .calculationsLen[offsetCalldata + 1 + i];\n        }\n        for (uint256 i = 0; i < offsetCalldata; i++) {\n            conditionsLen[i] = _packedStrategies.conditionsLen[i];\n        }\n        for (\n            uint256 i = 0;\n            i < _packedStrategies.addresses.length - (offsetCalldata + 1);\n            i++\n        ) {\n            conditionsLen[offsetCalldata + i] = _packedStrategies.conditionsLen[\n                offsetCalldata + 1 + i\n            ];\n        }\n\n        uint256 totalCallLen = 0;\n        offsetCalldata = 0;\n        for (uint256 i = 0; i < _packedStrategies.addresses.length; i++) {\n            if (i == indexStrategyToRemove) {\n                offsetCalldata = totalCallLen;\n            }\n            totalCallLen += _packedStrategies.callLen[i];\n        }\n\n        for (uint256 i = 0; i < offsetCalldata; i++) {\n            contracts[i] = _packedStrategies.contracts[i];\n        }\n        for (\n            uint256 i = 0;\n            i <\n            totalCallLen -\n                (offsetCalldata +\n                    _packedStrategies.callLen[indexStrategyToRemove]);\n            i++\n        ) {\n            contracts[i + offsetCalldata] = _packedStrategies.contracts[\n                offsetCalldata +\n                    _packedStrategies.callLen[indexStrategyToRemove] +\n                    i\n            ];\n        }\n        for (uint256 i = 0; i < offsetCalldata; i++) {\n            checkdata[i] = bytes4(_packedStrategies.checkdata[i]);\n        }\n        for (\n            uint256 i = 0;\n            i <\n            totalCallLen -\n                (offsetCalldata +\n                    _packedStrategies.callLen[indexStrategyToRemove]);\n            i++\n        ) {\n            checkdata[i + offsetCalldata] = bytes4(\n                _packedStrategies.checkdata[\n                    offsetCalldata +\n                        _packedStrategies.callLen[indexStrategyToRemove] +\n                        i\n                ]\n            );\n        }\n        for (uint256 i = 0; i < offsetCalldata; i++) {\n            offset[i] = _packedStrategies.offset[i];\n        }\n        for (\n            uint256 i = 0;\n            i <\n            totalCallLen -\n                (offsetCalldata +\n                    _packedStrategies.callLen[indexStrategyToRemove]);\n            i++\n        ) {\n            offset[i + offsetCalldata] = _packedStrategies.offset[\n                offsetCalldata +\n                    _packedStrategies.callLen[indexStrategyToRemove] +\n                    i\n            ];\n        }\n\n        totalCallLen = 0;\n        offsetCalldata = 0;\n        for (uint256 i = 0; i < _packedStrategies.addresses.length; i++) {\n            if (i == indexStrategyToRemove) {\n                offsetCalldata = totalCallLen;\n            }\n            totalCallLen += _packedStrategies.calculationsLen[i];\n        }\n        for (uint256 i = 0; i < offsetCalldata; i++) {\n            calculations[i] = _packedStrategies.calculations[i];\n        }\n        for (\n            uint256 i = 0;\n            i <\n            totalCallLen -\n                (offsetCalldata +\n                    _packedStrategies.calculationsLen[indexStrategyToRemove]);\n            i++\n        ) {\n            calculations[i + offsetCalldata] = _packedStrategies.calculations[\n                offsetCalldata +\n                    _packedStrategies.calculationsLen[indexStrategyToRemove] +\n                    i\n            ];\n        }\n        totalCallLen = 0;\n        offsetCalldata = 0;\n        for (uint256 i = 0; i < _packedStrategies.addresses.length; i++) {\n            if (i == indexStrategyToRemove) {\n                offsetCalldata = totalCallLen;\n            }\n            totalCallLen += _packedStrategies.conditionsLen[i];\n        }\n        for (uint256 i = 0; i < offsetCalldata; i++) {\n            conditions[i] = _packedStrategies.conditions[i];\n        }\n        for (\n            uint256 i = 0;\n            i <\n            totalCallLen -\n                (offsetCalldata +\n                    _packedStrategies.conditionsLen[indexStrategyToRemove]);\n            i++\n        ) {\n            conditions[i + offsetCalldata] = _packedStrategies.conditions[\n                offsetCalldata +\n                    _packedStrategies.conditionsLen[indexStrategyToRemove] +\n                    i\n            ];\n        }\n\n        strategiesHash = uint256(\n            keccak256(\n                abi.encodePacked(\n                    _packedStrategies.addresses,\n                    strategiesCallLen,\n                    contracts,\n                    checkdata,\n                    offset,\n                    calculationsLen,\n                    calculations,\n                    conditionsLen,\n                    conditions\n                )\n            )\n        );\n        emit StrategyRemoved(\n            _packedStrategies.addresses,\n            strategiesCallLen,\n            contracts,\n            checkdata,\n            offset,\n            calculationsLen,\n            calculations,\n            conditionsLen,\n            conditions\n        );\n    }\n\n    //Can't set only view, .call potentially modify state (should not arrive)\n    function getStrategiesData(\n        address[] memory contracts,\n        bytes[] memory checkdata,\n        uint256[] memory offset\n    ) public returns (uint256[] memory dataStrategies) {\n        uint256[] memory dataStrategies_ = new uint256[](contracts.length);\n        for (uint256 j; j < contracts.length; j++) {\n            (, bytes memory data) = contracts[j].call(checkdata[j]);\n            dataStrategies_[j] = uint256(bytesToBytes32(data, offset[j]));\n        }\n        return (dataStrategies_);\n    }\n\n    function updateTargetAllocation(address[] memory strategies) internal {\n        uint256[] memory realAllocations = new uint256[](strategies.length);\n        uint256 cumulativeAmountRealAllocations = 0;\n        uint256 cumulativeAmountTargetAllocations = 0;\n        for (uint256 j; j < strategies.length; j++) {\n            realAllocations[j] = IStrategy(strategies[j]).totalAssets();\n            cumulativeAmountRealAllocations += realAllocations[j];\n            cumulativeAmountTargetAllocations += targetAllocation[j];\n        }\n\n        if (cumulativeAmountTargetAllocations == 0) {\n            targetAllocation = realAllocations;\n        } else {\n            if (\n                cumulativeAmountTargetAllocations <=\n                cumulativeAmountRealAllocations\n            ) {\n                uint256 diff = cumulativeAmountRealAllocations -\n                    cumulativeAmountTargetAllocations;\n                // We need to add this amount respecting the different strategies allocation ratio\n                for (uint256 i = 0; i < strategies.length; i++) {\n                    uint256 strategyAllocationRatio = (PRECISION *\n                        targetAllocation[i]) /\n                        cumulativeAmountTargetAllocations;\n                    targetAllocation[i] +=\n                        (strategyAllocationRatio * diff) /\n                        PRECISION;\n                }\n            } else {\n                uint256 diff = cumulativeAmountTargetAllocations -\n                    cumulativeAmountRealAllocations;\n                // We need to substract this amount respecting the different strategies allocation ratio\n                for (uint256 i = 0; i < strategies.length; i++) {\n                    uint256 strategyAllocationRatio = (PRECISION *\n                        targetAllocation[i]) /\n                        cumulativeAmountTargetAllocations;\n                    targetAllocation[i] -=\n                        (strategyAllocationRatio * diff) /\n                        PRECISION;\n                }\n            }\n        }\n    }\n\n    function saveSnapshot(PackedStrategies memory _packedStrategies) external {\n        // Checks at least one strategy is registered\n        require(strategiesHash != 0, \"NO_STRATEGIES\");\n\n        bytes4[] memory checkdata = new bytes4[](\n            _packedStrategies.checkdata.length\n        );\n        for (uint256 i = 0; i < _packedStrategies.checkdata.length; i++) {\n            checkdata[i] = bytes4(_packedStrategies.checkdata[i]);\n        }\n\n        // Checks strategies data is valid\n        checkStrategyHash(_packedStrategies, checkdata);\n\n        updateTargetAllocation(_packedStrategies.addresses);\n        uint256[] memory dataStrategies = getStrategiesData(\n            _packedStrategies.contracts,\n            _packedStrategies.checkdata,\n            _packedStrategies.offset\n        );\n        inputHash = uint256(\n            keccak256(\n                abi.encodePacked(\n                    dataStrategies,\n                    _packedStrategies.calculations,\n                    _packedStrategies.conditions\n                )\n            )\n        );\n        snapshotTimestamp[inputHash] = block.timestamp;\n        emit NewSnapshot(\n            dataStrategies,\n            _packedStrategies.calculations,\n            _packedStrategies.conditions,\n            targetAllocation\n        );\n    }\n\n    function verifySolution(\n        uint256[] memory programOutput\n    ) external returns (bytes32) {\n        // NOTE: Check current snapshot not stale\n        uint256 _snapshotTimestamp = snapshotTimestamp[inputHash];\n        require(\n            _snapshotTimestamp + staleSnapshotPeriod > block.timestamp,\n            \"STALE_SNAPSHOT\"\n        );\n\n        // NOTE: We get the data from parsing the program output\n        (\n            uint256 inputHash_,\n            uint256[] memory current_target_allocation,\n            uint256[] memory new_target_allocation,\n            uint256 current_solution,\n            uint256 new_solution\n        ) = parseProgramOutput(programOutput);\n\n        // check inputs\n        require(inputHash_ == inputHash, \"HASH\");\n\n        // check target allocation len\n        require(\n            targetAllocation.length == current_target_allocation.length &&\n                targetAllocation.length == new_target_allocation.length,\n            \"TARGET_ALLOCATION_LENGTH\"\n        );\n\n        // check if the new solution better than previous one\n        require(\n            new_solution - minimumApyIncreaseForNewSolution >= current_solution,\n            \"TOO_BAD\"\n        );\n\n        // Check with cairoVerifier\n        bytes32 outputHash = keccak256(abi.encodePacked(programOutput));\n        bytes32 fact = keccak256(\n            abi.encodePacked(cairoProgramHash, outputHash)\n        );\n        require(cairoVerifier.isValid(fact), \"MISSING_PROOF\");\n\n        // check no one has improven it in stale period (in case market conditions deteriorated)\n        targetAllocation = new_target_allocation;\n        lastUpdate = block.timestamp;\n\n        sendRewardsToCurrentProposer();\n        proposer = msg.sender;\n        proposerPerformance = new_solution - current_solution;\n\n        emit NewSolution(\n            new_solution,\n            new_target_allocation,\n            msg.sender,\n            proposerPerformance,\n            block.timestamp\n        );\n        return (fact);\n    }\n\n    function sendRewardsToCurrentProposer() internal {\n        IStreamer _rewardsStreamer = IStreamer(rewardsStreamer);\n        if (address(_rewardsStreamer) == address(0)) {\n            return;\n        }\n        bytes32 streamId = _rewardsStreamer.getStreamId(\n            rewardsPayer,\n            address(this),\n            rewardsPerSec\n        );\n        if (_rewardsStreamer.streamToStart(streamId) == 0) {\n            // stream does not exist\n            return;\n        }\n        IERC20 _rewardsToken = IERC20(_rewardsStreamer.token());\n        // NOTE: if the stream does not have enough to pay full amount, it will pay less than expected\n        // WARNING: if this happens and the proposer is changed, the old proposer will lose the rewards\n        // TODO: create a way to ensure previous proposer gets the rewards even when payers balance is not enough (by saving how much he's owed)\n        _rewardsStreamer.withdraw(rewardsPayer, address(this), rewardsPerSec);\n        uint256 rewardsBalance = _rewardsToken.balanceOf(address(this));\n        _rewardsToken.safeTransfer(proposer, rewardsBalance);\n    }\n\n    function claimRewards() external {\n        require(msg.sender == proposer, \"NOT_ALLOWED\");\n        sendRewardsToCurrentProposer();\n    }\n\n    // UTILS\n    function checkStrategyHash(\n        PackedStrategies memory _packedStrategies,\n        bytes4[] memory checkdata\n    ) internal view {\n        require(\n            strategiesHash ==\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            _packedStrategies.addresses,\n                            _packedStrategies.callLen,\n                            _packedStrategies.contracts,\n                            checkdata,\n                            _packedStrategies.offset,\n                            _packedStrategies.calculationsLen,\n                            _packedStrategies.calculations,\n                            _packedStrategies.conditionsLen,\n                            _packedStrategies.conditions\n                        )\n                    )\n                ),\n            \"DATA\"\n        );\n    }\n\n    function parseProgramOutput(\n        uint256[] memory programOutput\n    )\n        public\n        pure\n        returns (\n            uint256 _inputHash,\n            uint256[] memory _current_target_allocation,\n            uint256[] memory _new_target_allocation,\n            uint256 _current_solution,\n            uint256 _new_solution\n        )\n    {\n        uint256 inputHashUint256 = programOutput[0] << 128;\n        inputHashUint256 += programOutput[1];\n\n        uint256[] memory current_target_allocation = new uint256[](\n            programOutput[2]\n        );\n        uint256[] memory new_target_allocation = new uint256[](\n            programOutput[2]\n        );\n\n        for (uint256 i = 0; i < programOutput[2]; i++) {\n            // NOTE: skip the 2 first value + array len\n            current_target_allocation[i] = programOutput[i + 3];\n            new_target_allocation[i] = programOutput[i + 4 + programOutput[2]];\n        }\n        return (\n            inputHashUint256,\n            current_target_allocation,\n            new_target_allocation,\n            programOutput[programOutput.length - 2],\n            programOutput[programOutput.length - 1]\n        );\n    }\n\n    function bytesToBytes32(\n        bytes memory b,\n        uint offset\n    ) private pure returns (bytes32) {\n        bytes32 out;\n        for (uint i = 0; i < 32; i++) {\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\n        }\n        return out;\n    }\n\n    function castCheckdataToBytes4(\n        bytes[] memory oldCheckdata\n    ) internal view returns (bytes4[] memory checkdata) {\n        checkdata = new bytes4[](oldCheckdata.length);\n        for (uint256 i = 0; i < oldCheckdata.length; i++) {\n            checkdata[i] = bytes4(oldCheckdata[i]);\n        }\n    }\n\n    function checkValidityOfData(\n        StrategyParam memory _newStrategyParam\n    ) internal {\n        // check lengths\n        require(\n            _newStrategyParam.callLen == _newStrategyParam.contracts.length &&\n                _newStrategyParam.callLen ==\n                _newStrategyParam.checkdata.length &&\n                _newStrategyParam.callLen == _newStrategyParam.offset.length &&\n                _newStrategyParam.calculationsLen ==\n                _newStrategyParam.calculations.length &&\n                _newStrategyParam.conditionsLen ==\n                _newStrategyParam.conditions.length,\n            \"ARRAY_LEN\"\n        );\n\n        // check success of calls\n        for (uint256 i = 0; i < _newStrategyParam.callLen; i++) {\n            (bool success, ) = _newStrategyParam.contracts[i].call(\n                _newStrategyParam.checkdata[i]\n            );\n            require(success == true, \"CALLDATA\");\n            // Should we check for offset?\n        }\n    }\n\n    function appendUint256ToArray(\n        uint256[] memory array,\n        uint256 newItem\n    ) internal pure returns (uint256[] memory newArray) {\n        newArray = new uint256[](array.length + 1);\n        for (uint256 i = 0; i < array.length; i++) {\n            newArray[i] = array[i];\n        }\n        newArray[array.length] = newItem;\n    }\n\n    function concatenateUint256ArrayToUint256Array(\n        uint256[] memory arrayA,\n        uint256[] memory arrayB\n    ) internal pure returns (uint256[] memory newArray) {\n        newArray = new uint256[](arrayA.length + arrayB.length);\n        for (uint256 i = 0; i < arrayA.length; i++) {\n            newArray[i] = arrayA[i];\n        }\n        uint256 lenA = arrayA.length;\n        for (uint256 i = 0; i < arrayB.length; i++) {\n            newArray[i + lenA] = arrayB[i];\n        }\n    }\n}\n","imports":[".cache/OpenZeppelin/v4.8.0/access/Ownable.sol",".cache/OpenZeppelin/v4.8.0/token/ERC20/IERC20.sol",".cache/OpenZeppelin/v4.8.0/token/ERC20/utils/SafeERC20.sol"],"references":[],"urls":[]},"MockStrategy1.sol":{"checksum":{"algorithm":"md5","hash":"0x6a9608f610d677db36c489d7423fc243"},"content":"//SPDX-License-Identifier: UNLICENSED\n\ncontract MockStrategy {\n    uint256 public apiVersion = 2;\n    uint256 public totalAssets = 50 * 10 ** 18;\n\n    function updateTotalAssets() public {\n        totalAssets = 500 * 10 ** 18;\n    }\n}\n\ncontract MockStrategy2 {\n    uint256 public apiVersion = 2;\n    uint256 public totalAssets = 10 * 10 ** 18;\n\n    function updateTotalAssets() public {\n        totalAssets = 500 * 10 ** 18;\n    }\n}\n","imports":[],"references":[],"urls":[]},"MockStrategyData1.sol":{"checksum":{"algorithm":"md5","hash":"0x5fa398b50c5d8d2061371e2b688b80cf"},"content":"//SPDX-License-Identifier: UNLICENSED\n\ncontract MockStrategyData1 {\n    uint256 public first_data = 11;\n    uint256 public second_data = 111;\n}\n","imports":[],"references":[],"urls":[]},"MockStrategyData2.sol":{"checksum":{"algorithm":"md5","hash":"0xbb150adb0b0f05603df7d9e27c4bb2fc"},"content":"//SPDX-License-Identifier: UNLICENSED\n\ncontract MockStrategyData2 {\n    uint256 public first_data = 22;\n    uint256 public second_data = 222;\n}\n","imports":[],"references":[],"urls":[]}}}