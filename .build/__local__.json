{"contractTypes":{"DebtAllocator":{"abi":[{"inputs":[{"internalType":"address","name":"_cairoVerifier","type":"address"},{"internalType":"bytes32","name":"_cairoProgramHash","type":"bytes32"}],"stateMutability":"payable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"newCairoProgramHash","type":"bytes32"}],"name":"NewCairoProgramHash","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"newCairoVerifier","type":"address"}],"name":"NewCairoVerifier","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256[]","name":"dataStrategies","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"calculation","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"condition","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"targetAllocations","type":"uint256[]"}],"name":"NewSnapshot","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newApy","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"newTargetAllocation","type":"uint256[]"},{"indexed":false,"internalType":"address","name":"proposer","type":"address"},{"indexed":false,"internalType":"uint256","name":"proposerPerformance","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"NewSolution","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newStalePeriod","type":"uint256"}],"name":"NewStalePeriod","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newStaleSnapshotPeriod","type":"uint256"}],"name":"NewStaleSnapshotPeriod","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"Strategies","type":"address[]"},{"indexed":false,"internalType":"uint256[]","name":"StrategiesCallLen","type":"uint256[]"},{"indexed":false,"internalType":"address[]","name":"Contracts","type":"address[]"},{"indexed":false,"internalType":"bytes4[]","name":"Checkdata","type":"bytes4[]"},{"indexed":false,"internalType":"uint256[]","name":"Offset","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"CalculationsLen","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"Calculations","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"ConditionsLen","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"Conditions","type":"uint256[]"}],"name":"StrategyAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"Strategies","type":"address[]"},{"indexed":false,"internalType":"uint256[]","name":"StrategiesCallLen","type":"uint256[]"},{"indexed":false,"internalType":"address[]","name":"Contracts","type":"address[]"},{"indexed":false,"internalType":"bytes4[]","name":"Checkdata","type":"bytes4[]"},{"indexed":false,"internalType":"uint256[]","name":"Offset","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"CalculationsLen","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"Calculations","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"ConditionsLen","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"Conditions","type":"uint256[]"}],"name":"StrategyRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"Strategies","type":"address[]"},{"indexed":false,"internalType":"uint256[]","name":"StrategiesCallLen","type":"uint256[]"},{"indexed":false,"internalType":"address[]","name":"Contracts","type":"address[]"},{"indexed":false,"internalType":"bytes4[]","name":"Checkdata","type":"bytes4[]"},{"indexed":false,"internalType":"uint256[]","name":"Offset","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"CalculationsLen","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"Calculations","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"ConditionsLen","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"Conditions","type":"uint256[]"}],"name":"StrategyUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256[]","name":"newTargetAllocation","type":"uint256[]"}],"name":"targetAllocationForced","type":"event"},{"inputs":[{"components":[{"internalType":"address[]","name":"addresses","type":"address[]"},{"internalType":"uint256[]","name":"callLen","type":"uint256[]"},{"internalType":"address[]","name":"contracts","type":"address[]"},{"internalType":"bytes[]","name":"checkdata","type":"bytes[]"},{"internalType":"uint256[]","name":"offset","type":"uint256[]"},{"internalType":"uint256[]","name":"calculationsLen","type":"uint256[]"},{"internalType":"uint256[]","name":"calculations","type":"uint256[]"},{"internalType":"uint256[]","name":"conditionsLen","type":"uint256[]"},{"internalType":"uint256[]","name":"conditions","type":"uint256[]"}],"internalType":"struct DebtAllocator.PackedStrategies","name":"_packedStrategies","type":"tuple"},{"internalType":"address","name":"_newStrategy","type":"address"},{"components":[{"internalType":"uint256","name":"callLen","type":"uint256"},{"internalType":"address[]","name":"contracts","type":"address[]"},{"internalType":"bytes[]","name":"checkdata","type":"bytes[]"},{"internalType":"uint256[]","name":"offset","type":"uint256[]"},{"internalType":"uint256","name":"calculationsLen","type":"uint256"},{"internalType":"uint256[]","name":"calculations","type":"uint256[]"},{"internalType":"uint256","name":"conditionsLen","type":"uint256"},{"internalType":"uint256[]","name":"conditions","type":"uint256[]"}],"internalType":"struct DebtAllocator.StrategyParam","name":"_newStrategyParam","type":"tuple"}],"name":"addStrategy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"cairoProgramHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cairoVerifier","outputs":[{"internalType":"contract ICairoVerifier","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"claimRewards","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"_newTargetAllocation","type":"uint256[]"}],"name":"forceTargetAllocation","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"contracts","type":"address[]"},{"internalType":"bytes[]","name":"checkdata","type":"bytes[]"},{"internalType":"uint256[]","name":"offset","type":"uint256[]"}],"name":"getStrategiesData","outputs":[{"internalType":"uint256[]","name":"dataStrategies","type":"uint256[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"inputHash","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastUpdate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"minimumApyIncreaseForNewSolution","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"programOutput","type":"uint256[]"}],"name":"parseProgramOutput","outputs":[{"internalType":"uint256","name":"_inputHash","type":"uint256"},{"internalType":"uint256[]","name":"_currentTargetAllocation","type":"uint256[]"},{"internalType":"uint256[]","name":"_newTargetAllocation","type":"uint256[]"},{"internalType":"uint256","name":"_currentSolution","type":"uint256"},{"internalType":"uint256","name":"_newSolution","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"proposer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"proposerPerformance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address[]","name":"addresses","type":"address[]"},{"internalType":"uint256[]","name":"callLen","type":"uint256[]"},{"internalType":"address[]","name":"contracts","type":"address[]"},{"internalType":"bytes[]","name":"checkdata","type":"bytes[]"},{"internalType":"uint256[]","name":"offset","type":"uint256[]"},{"internalType":"uint256[]","name":"calculationsLen","type":"uint256[]"},{"internalType":"uint256[]","name":"calculations","type":"uint256[]"},{"internalType":"uint256[]","name":"conditionsLen","type":"uint256[]"},{"internalType":"uint256[]","name":"conditions","type":"uint256[]"}],"internalType":"struct DebtAllocator.PackedStrategies","name":"_packedStrategies","type":"tuple"},{"internalType":"uint256","name":"indexStrategyToRemove","type":"uint256"}],"name":"removeStrategy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardsPayer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardsPerSec","outputs":[{"internalType":"uint216","name":"","type":"uint216"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardsStreamer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address[]","name":"addresses","type":"address[]"},{"internalType":"uint256[]","name":"callLen","type":"uint256[]"},{"internalType":"address[]","name":"contracts","type":"address[]"},{"internalType":"bytes[]","name":"checkdata","type":"bytes[]"},{"internalType":"uint256[]","name":"offset","type":"uint256[]"},{"internalType":"uint256[]","name":"calculationsLen","type":"uint256[]"},{"internalType":"uint256[]","name":"calculations","type":"uint256[]"},{"internalType":"uint256[]","name":"conditionsLen","type":"uint256[]"},{"internalType":"uint256[]","name":"conditions","type":"uint256[]"}],"internalType":"struct DebtAllocator.PackedStrategies","name":"_packedStrategies","type":"tuple"}],"name":"saveSnapshot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"snapshotTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"stalePeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"staleSnapshotPeriod","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"strategiesHash","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"targetAllocation","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_cairoProgramHash","type":"bytes32"}],"name":"updateCairoProgramHash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_cairoVerifier","type":"address"}],"name":"updateCairoVerifier","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_rewardsPayer","type":"address"},{"internalType":"address","name":"_rewardsStreamer","type":"address"},{"internalType":"uint216","name":"_rewardsPerSec","type":"uint216"}],"name":"updateRewardsConfig","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_stalePeriod","type":"uint256"}],"name":"updateStalePeriod","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_staleSnapshotPeriod","type":"uint256"}],"name":"updateStaleSnapshotPeriod","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address[]","name":"addresses","type":"address[]"},{"internalType":"uint256[]","name":"callLen","type":"uint256[]"},{"internalType":"address[]","name":"contracts","type":"address[]"},{"internalType":"bytes[]","name":"checkdata","type":"bytes[]"},{"internalType":"uint256[]","name":"offset","type":"uint256[]"},{"internalType":"uint256[]","name":"calculationsLen","type":"uint256[]"},{"internalType":"uint256[]","name":"calculations","type":"uint256[]"},{"internalType":"uint256[]","name":"conditionsLen","type":"uint256[]"},{"internalType":"uint256[]","name":"conditions","type":"uint256[]"}],"internalType":"struct DebtAllocator.PackedStrategies","name":"_packedStrategies","type":"tuple"},{"internalType":"uint256","name":"indexStrategyToUpdate","type":"uint256"},{"components":[{"internalType":"uint256","name":"callLen","type":"uint256"},{"internalType":"address[]","name":"contracts","type":"address[]"},{"internalType":"bytes[]","name":"checkdata","type":"bytes[]"},{"internalType":"uint256[]","name":"offset","type":"uint256[]"},{"internalType":"uint256","name":"calculationsLen","type":"uint256"},{"internalType":"uint256[]","name":"calculations","type":"uint256[]"},{"internalType":"uint256","name":"conditionsLen","type":"uint256"},{"internalType":"uint256[]","name":"conditions","type":"uint256[]"}],"internalType":"struct DebtAllocator.StrategyParam","name":"_newStrategyParam","type":"tuple"}],"name":"updateStrategy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"programOutput","type":"uint256[]"}],"name":"verifySolution","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"}],"contractName":"DebtAllocator","deploymentBytecode":{"bytecode":""},"devdoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"runtimeBytecode":{"bytecode":""},"sourceId":"DebtAllocator.sol","userdoc":{"kind":"user","methods":{},"version":1}},"ICairoVerifier":{"abi":[{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"isValid","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"contractName":"ICairoVerifier","deploymentBytecode":{},"devdoc":{"kind":"dev","methods":{},"version":1},"runtimeBytecode":{},"sourceId":"DebtAllocator.sol","userdoc":{"kind":"user","methods":{},"version":1}},"IStreamer":{"abi":[{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint216","name":"amountPerSec","type":"uint216"}],"name":"getStreamId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"streamToStart","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"token","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint216","name":"amountPerSec","type":"uint216"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"contractName":"IStreamer","deploymentBytecode":{},"devdoc":{"kind":"dev","methods":{},"version":1},"runtimeBytecode":{},"sourceId":"DebtAllocator.sol","userdoc":{"kind":"user","methods":{},"version":1}},"MockStrategy":{"abi":[{"inputs":[],"name":"apiVersion","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"updateTotalAssets","outputs":[],"stateMutability":"nonpayable","type":"function"}],"contractName":"MockStrategy","deploymentBytecode":{"bytecode":"0x608060405260026000556802b5e3af16b188000060015534801561002257600080fd5b5060ac806100316000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c806301e1d1141460415780632582941014605b578063d033cb4d146063575b600080fd5b604960015481565b60405190815260200160405180910390f35b604960005481565b6074681b1ae4d6e2ef500000600155565b00fea2646970667358221220354839224a3392a23a6c20f69b35c6997d045e6c6a50e7e4eef014bee16cddfe64736f6c63430008110033"},"devdoc":{"kind":"dev","methods":{},"version":1},"runtimeBytecode":{"bytecode":"0x608060405260026000556802b5e3af16b188000060015534801561002257600080fd5b5060ac806100316000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c806301e1d1141460415780632582941014605b578063d033cb4d146063575b600080fd5b604960015481565b60405190815260200160405180910390f35b604960005481565b6074681b1ae4d6e2ef500000600155565b00fea2646970667358221220354839224a3392a23a6c20f69b35c6997d045e6c6a50e7e4eef014bee16cddfe64736f6c63430008110033"},"sourceId":"mocks/MockStrategy1.sol","userdoc":{"kind":"user","methods":{},"version":1}},"MockStrategy2":{"abi":[{"inputs":[],"name":"apiVersion","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"updateTotalAssets","outputs":[],"stateMutability":"nonpayable","type":"function"}],"contractName":"MockStrategy2","deploymentBytecode":{"bytecode":"0x60806040526002600055678ac7230489e8000060015534801561002157600080fd5b5060ac806100306000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c806301e1d1141460415780632582941014605b578063d033cb4d146063575b600080fd5b604960015481565b60405190815260200160405180910390f35b604960005481565b6074681b1ae4d6e2ef500000600155565b00fea2646970667358221220529d49bf9335431885d38c2b83ba4ac4f54cdeea1602a33c1db1e1a9c160ff6764736f6c63430008110033"},"devdoc":{"kind":"dev","methods":{},"version":1},"runtimeBytecode":{"bytecode":"0x60806040526002600055678ac7230489e8000060015534801561002157600080fd5b5060ac806100306000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c806301e1d1141460415780632582941014605b578063d033cb4d146063575b600080fd5b604960015481565b60405190815260200160405180910390f35b604960005481565b6074681b1ae4d6e2ef500000600155565b00fea2646970667358221220529d49bf9335431885d38c2b83ba4ac4f54cdeea1602a33c1db1e1a9c160ff6764736f6c63430008110033"},"sourceId":"mocks/MockStrategy1.sol","userdoc":{"kind":"user","methods":{},"version":1}},"MockStrategyData1":{"abi":[{"inputs":[],"name":"first_data","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"second_data","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"contractName":"MockStrategyData1","deploymentBytecode":{"bytecode":"0x6080604052600b600055606f600155348015601957600080fd5b50608f806100286000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80639c47575f146037578063dd384acb146051575b600080fd5b603f60015481565b60405190815260200160405180910390f35b603f6000548156fea264697066735822122064d61c276312088c6a8b119de39c47ed4e36e54e46b75f37fdd4cc9ed5efa9f264736f6c63430008110033"},"devdoc":{"kind":"dev","methods":{},"version":1},"runtimeBytecode":{"bytecode":"0x6080604052600b600055606f600155348015601957600080fd5b50608f806100286000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80639c47575f146037578063dd384acb146051575b600080fd5b603f60015481565b60405190815260200160405180910390f35b603f6000548156fea264697066735822122064d61c276312088c6a8b119de39c47ed4e36e54e46b75f37fdd4cc9ed5efa9f264736f6c63430008110033"},"sourceId":"mocks/MockStrategyData1.sol","userdoc":{"kind":"user","methods":{},"version":1}},"MockStrategyData2":{"abi":[{"inputs":[],"name":"first_data","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"second_data","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"contractName":"MockStrategyData2","deploymentBytecode":{"bytecode":"0x6080604052601660005560de600155348015601957600080fd5b50608f806100286000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80639c47575f146037578063dd384acb146051575b600080fd5b603f60015481565b60405190815260200160405180910390f35b603f6000548156fea26469706673582212206464a33357cf1dd517ff4c9d0862671b7aea39ae6f6eda0a276194bc7155f69b64736f6c63430008110033"},"devdoc":{"kind":"dev","methods":{},"version":1},"runtimeBytecode":{"bytecode":"0x6080604052601660005560de600155348015601957600080fd5b50608f806100286000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80639c47575f146037578063dd384acb146051575b600080fd5b603f60015481565b60405190815260200160405180910390f35b603f6000548156fea26469706673582212206464a33357cf1dd517ff4c9d0862671b7aea39ae6f6eda0a276194bc7155f69b64736f6c63430008110033"},"sourceId":"mocks/MockStrategyData2.sol","userdoc":{"kind":"user","methods":{},"version":1}}},"manifest":"ethpm/3","sources":{"DebtAllocator.sol":{"checksum":{"algorithm":"md5","hash":"0x1db5b9ca11063a8e5aeb129c0cc284a4"},"content":"//SPDX-License-Identifier: UNLICENSED\n\nimport \"@openzeppelin/access/Ownable.sol\";\nimport \"@openzeppelin/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/token/ERC20/utils/SafeERC20.sol\";\n\npragma solidity >=0.7.0 <0.9.0;\n\ninterface ICairoVerifier {\n    function isValid(bytes32) external view returns (bool);\n}\n\ninterface IStreamer {\n    function token() external view returns (IERC20);\n\n    function streamToStart(bytes32) external view returns (uint256);\n\n    function withdraw(address from, address to, uint216 amountPerSec) external;\n\n    function getStreamId(\n        address from,\n        address to,\n        uint216 amountPerSec\n    ) external view returns (bytes32);\n}\n\ncontract DebtAllocator is Ownable {\n    using SafeERC20 for IERC20;\n\n    uint256 PRECISION = 10 ** 18;\n\n    ICairoVerifier public cairoVerifier = ICairoVerifier(address(0));\n    bytes32 public cairoProgramHash = 0x0;\n\n    struct PackedStrategies {\n        address[] addresses;\n        uint256[] callLen;\n        address[] contracts;\n        bytes[] checkdata;\n        uint256[] offset;\n        uint256[] calculationsLen;\n        uint256[] calculations;\n        uint256[] conditionsLen;\n        uint256[] conditions;\n    }\n\n    struct StrategyParam {\n        uint256 callLen;\n        address[] contracts;\n        bytes[] checkdata;\n        uint256[] offset;\n        uint256 calculationsLen;\n        uint256[] calculations;\n        uint256 conditionsLen;\n        uint256[] conditions;\n    }\n\n    uint256[] public targetAllocation;\n\n    // Everyone is free to propose a new solution, the address is stored so the user can get rewarded\n    address public proposer;\n    uint256 public proposerPerformance;\n    uint256 public lastUpdate;\n    uint256 public strategiesHash;\n    uint256 public inputHash;\n    mapping(uint256 => uint256) public snapshotTimestamp;\n\n    uint256 public staleSnapshotPeriod = 24 * 3600;\n    uint256 public stalePeriod = 24 * 3600;\n\n    // Rewards config\n    address public rewardsPayer;\n    address public rewardsStreamer;\n    uint216 public rewardsPerSec;\n\n    // 100% APY = 10^27, minimum increased = 10^23 = 0,01%\n    uint256 public minimumApyIncreaseForNewSolution = 100000000000000000000000;\n\n    constructor(address _cairoVerifier, bytes32 _cairoProgramHash) payable {}\n\n    event StrategyAdded(\n        address[] Strategies,\n        uint256[] StrategiesCallLen,\n        address[] Contracts,\n        bytes4[] Checkdata,\n        uint256[] Offset,\n        uint256[] CalculationsLen,\n        uint256[] Calculations,\n        uint256[] ConditionsLen,\n        uint256[] Conditions\n    );\n    event StrategyUpdated(\n        address[] Strategies,\n        uint256[] StrategiesCallLen,\n        address[] Contracts,\n        bytes4[] Checkdata,\n        uint256[] Offset,\n        uint256[] CalculationsLen,\n        uint256[] Calculations,\n        uint256[] ConditionsLen,\n        uint256[] Conditions\n    );\n    event StrategyRemoved(\n        address[] Strategies,\n        uint256[] StrategiesCallLen,\n        address[] Contracts,\n        bytes4[] Checkdata,\n        uint256[] Offset,\n        uint256[] CalculationsLen,\n        uint256[] Calculations,\n        uint256[] ConditionsLen,\n        uint256[] Conditions\n    );\n\n    event NewSnapshot(\n        uint256[] dataStrategies,\n        uint256[] calculation,\n        uint256[] condition,\n        uint256[] targetAllocations\n    );\n    event NewSolution(\n        uint256 newApy,\n        uint256[] newTargetAllocation,\n        address proposer,\n        uint256 proposerPerformance,\n        uint256 timestamp\n    );\n\n    event NewCairoProgramHash(bytes32 newCairoProgramHash);\n    event NewCairoVerifier(address newCairoVerifier);\n    event NewStalePeriod(uint256 newStalePeriod);\n    event NewStaleSnapshotPeriod(uint256 newStaleSnapshotPeriod);\n\n    event targetAllocationForced(uint256[] newTargetAllocation);\n\n    function updateRewardsConfig(\n        address _rewardsPayer,\n        address _rewardsStreamer,\n        uint216 _rewardsPerSec\n    ) external onlyOwner {\n        bytes32 streamId = IStreamer(_rewardsStreamer).getStreamId(\n            _rewardsPayer,\n            address(this),\n            _rewardsPerSec\n        );\n        require(\n            IStreamer(_rewardsStreamer).streamToStart(streamId) > 0,\n            \"STREAM\"\n        );\n        rewardsPayer = _rewardsPayer;\n        rewardsStreamer = _rewardsStreamer;\n        rewardsPerSec = _rewardsPerSec;\n    }\n\n    function updateCairoProgramHash(\n        bytes32 _cairoProgramHash\n    ) public onlyOwner {\n        cairoProgramHash = _cairoProgramHash;\n        emit NewCairoProgramHash(_cairoProgramHash);\n    }\n\n    function updateCairoVerifier(address _cairoVerifier) public onlyOwner {\n        cairoVerifier = ICairoVerifier(_cairoVerifier);\n        emit NewCairoVerifier(_cairoVerifier);\n    }\n\n    function updateStalePeriod(uint256 _stalePeriod) external onlyOwner {\n        stalePeriod = _stalePeriod;\n        emit NewStalePeriod(_stalePeriod);\n    }\n\n    function updateStaleSnapshotPeriod(\n        uint256 _staleSnapshotPeriod\n    ) external onlyOwner {\n        staleSnapshotPeriod = _staleSnapshotPeriod;\n        emit NewStaleSnapshotPeriod(_staleSnapshotPeriod);\n    }\n\n    function forceTargetAllocation(\n        uint256[] calldata _newTargetAllocation\n    ) public onlyOwner {\n        require(strategiesHash != 0, \"NO_STRATEGIES\");\n        require(\n            _newTargetAllocation.length == targetAllocation.length,\n            \"LENGTH\"\n        );\n        for (uint256 j; j < _newTargetAllocation.length; j++) {\n            targetAllocation[j] = _newTargetAllocation[j];\n        }\n        emit targetAllocationForced(_newTargetAllocation);\n    }\n\n    function saveSnapshot(\n        PackedStrategies calldata _packedStrategies\n    ) external {\n        // Checks at least one strategy is registered\n        require(strategiesHash != 0, \"NO_STRATEGIES\");\n\n        bytes4[] memory checkdata = castCheckdataToBytes4(\n            _packedStrategies.checkdata\n        );\n\n        // Checks strategies data is valid\n        checkStrategyHash(_packedStrategies, checkdata);\n\n        // updateTargetAllocation(_packedStrategies.addresses);\n\n        uint256[] memory dataStrategies = getStrategiesData(\n            _packedStrategies.contracts,\n            _packedStrategies.checkdata,\n            _packedStrategies.offset\n        );\n\n        inputHash = uint256(\n            keccak256(\n                abi.encodePacked(\n                    dataStrategies,\n                    _packedStrategies.calculations,\n                    _packedStrategies.conditions\n                )\n            )\n        );\n\n        snapshotTimestamp[inputHash] = block.timestamp;\n        // TODO: do we need current debt in each strategy? (to be able to take into account withdrawals)\n        emit NewSnapshot(\n            dataStrategies,\n            _packedStrategies.calculations,\n            _packedStrategies.conditions,\n            targetAllocation\n        );\n    }\n\n    function verifySolution(\n        uint256[] calldata programOutput\n    ) external returns (bytes32) {\n        // NOTE: Check current snapshot not stale\n        uint256 _inputHash = inputHash;\n        uint256 _snapshotTimestamp = snapshotTimestamp[_inputHash];\n\n        require(\n            _snapshotTimestamp + staleSnapshotPeriod > block.timestamp,\n            \"STALE_SNAPSHOT\"\n        );\n\n        // NOTE: We get the data from parsing the program output\n        (\n            uint256 inputHash_,\n            uint256[] memory currentTargetAllocation,\n            uint256[] memory newTargetAllocation,\n            uint256 currentSolution,\n            uint256 newSolution\n        ) = parseProgramOutput(programOutput);\n\n        // check inputs\n        require(inputHash_ == _inputHash, \"HASH\");\n\n        // check target allocation len\n        require(\n            targetAllocation.length == currentTargetAllocation.length &&\n                targetAllocation.length == newTargetAllocation.length,\n            \"TARGET_ALLOCATION_LENGTH\"\n        );\n\n        // check if the new solution better than previous one\n        require(\n            newSolution - minimumApyIncreaseForNewSolution >= currentSolution,\n            \"TOO_BAD\"\n        );\n\n        // Check with cairoVerifier\n        bytes32 outputHash = keccak256(abi.encodePacked(programOutput));\n        bytes32 fact = keccak256(\n            abi.encodePacked(cairoProgramHash, outputHash)\n        );\n\n        require(cairoVerifier.isValid(fact), \"MISSING_PROOF\");\n\n        targetAllocation = newTargetAllocation;\n        lastUpdate = block.timestamp;\n\n        sendRewardsToCurrentProposer();\n        proposer = msg.sender;\n        proposerPerformance = newSolution - currentSolution;\n\n        emit NewSolution(\n            newSolution,\n            newTargetAllocation,\n            msg.sender,\n            proposerPerformance,\n            block.timestamp\n        );\n        return (fact);\n    }\n\n    // =============== REWARDS =================\n    function sendRewardsToCurrentProposer() internal {\n        IStreamer _rewardsStreamer = IStreamer(rewardsStreamer);\n        if (address(_rewardsStreamer) == address(0)) {\n            return;\n        }\n        bytes32 streamId = _rewardsStreamer.getStreamId(\n            rewardsPayer,\n            address(this),\n            rewardsPerSec\n        );\n        if (_rewardsStreamer.streamToStart(streamId) == 0) {\n            // stream does not exist\n            return;\n        }\n        IERC20 _rewardsToken = IERC20(_rewardsStreamer.token());\n        // NOTE: if the stream does not have enough to pay full amount, it will pay less than expected\n        // WARNING: if this happens and the proposer is changed, the old proposer will lose the rewards\n        // TODO: create a way to ensure previous proposer gets the rewards even when payers balance is not enough (by saving how much he's owed)\n        _rewardsStreamer.withdraw(rewardsPayer, address(this), rewardsPerSec);\n        uint256 rewardsBalance = _rewardsToken.balanceOf(address(this));\n        _rewardsToken.safeTransfer(proposer, rewardsBalance);\n    }\n\n    function claimRewards() external {\n        require(msg.sender == proposer, \"NOT_ALLOWED\");\n        sendRewardsToCurrentProposer();\n    }\n\n    // ============== STRATEGY MANAGEMENT ================\n    function addStrategy(\n        PackedStrategies calldata _packedStrategies,\n        address _newStrategy,\n        StrategyParam calldata _newStrategyParam\n    ) external onlyOwner {\n        // Checks previous strategies data valid\n        bytes4[] memory checkdata = castCheckdataToBytes4(\n            _packedStrategies.checkdata\n        );\n\n        if (strategiesHash != 0) {\n            checkStrategyHash(_packedStrategies, checkdata);\n        } else {\n            require(_packedStrategies.addresses.length == 0, \"FIRST_DATA\");\n        }\n\n        for (uint256 i = 0; i < _packedStrategies.addresses.length; i++) {\n            if (_packedStrategies.addresses[i] == _newStrategy) {\n                revert(\"STRATEGY_EXISTS\");\n            }\n        }\n\n        // Checks call data valid\n        checkValidityOfData(_newStrategyParam);\n\n        // Build new arrays for the Strategy Hash and the Event\n        address[] memory strategies = new address[](\n            _packedStrategies.addresses.length + 1\n        );\n        for (uint256 i = 0; i < _packedStrategies.addresses.length; i++) {\n            strategies[i] = _packedStrategies.addresses[i];\n        }\n        strategies[_packedStrategies.addresses.length] = _newStrategy;\n\n        uint256[] memory strategiesCallLen = appendUint256ToArray(\n            _packedStrategies.callLen,\n            _newStrategyParam.callLen\n        );\n\n        address[] memory contracts = new address[](\n            _packedStrategies.contracts.length + _newStrategyParam.callLen\n        );\n        for (uint256 i = 0; i < _packedStrategies.contracts.length; i++) {\n            contracts[i] = _packedStrategies.contracts[i];\n        }\n        for (uint256 i = 0; i < _newStrategyParam.callLen; i++) {\n            contracts[\n                i + _packedStrategies.contracts.length\n            ] = _newStrategyParam.contracts[i];\n        }\n\n        checkdata = new bytes4[](\n            _packedStrategies.checkdata.length + _newStrategyParam.callLen\n        );\n        for (uint256 i = 0; i < _packedStrategies.checkdata.length; i++) {\n            checkdata[i] = bytes4(_packedStrategies.checkdata[i]);\n        }\n\n        for (uint256 i = 0; i < _newStrategyParam.callLen; i++) {\n            checkdata[i + _packedStrategies.checkdata.length] = bytes4(\n                _newStrategyParam.checkdata[i]\n            );\n        }\n\n        uint256[] memory offset = concatenateUint256ArrayToUint256Array(\n            _packedStrategies.offset,\n            _newStrategyParam.offset\n        );\n\n        uint256[] memory calculationsLen = appendUint256ToArray(\n            _packedStrategies.calculationsLen,\n            _newStrategyParam.calculationsLen\n        );\n\n        uint256[] memory calculations = concatenateUint256ArrayToUint256Array(\n            _packedStrategies.calculations,\n            _newStrategyParam.calculations\n        );\n\n        uint256[] memory conditionsLen = appendUint256ToArray(\n            _packedStrategies.conditionsLen,\n            _newStrategyParam.conditionsLen\n        );\n\n        uint256[] memory conditions = concatenateUint256ArrayToUint256Array(\n            _packedStrategies.conditions,\n            _newStrategyParam.conditions\n        );\n\n        strategiesHash = uint256(\n            keccak256(\n                abi.encodePacked(\n                    strategies,\n                    strategiesCallLen,\n                    contracts,\n                    checkdata,\n                    offset,\n                    calculationsLen,\n                    calculations,\n                    conditionsLen,\n                    conditions\n                )\n            )\n        );\n\n        // New strategy allocation always set to 0, people can then send new solution\n        targetAllocation.push(0);\n\n        emit StrategyAdded(\n            strategies,\n            strategiesCallLen,\n            contracts,\n            checkdata,\n            offset,\n            calculationsLen,\n            calculations,\n            conditionsLen,\n            conditions\n        );\n    }\n\n    // TODO: use utils functions\n    function updateStrategy(\n        PackedStrategies memory _packedStrategies,\n        uint256 indexStrategyToUpdate,\n        StrategyParam memory _newStrategyParam\n    ) external onlyOwner {\n        // Checks at least one strategy is registered\n        require(strategiesHash != 0, \"NO_STRATEGIES\");\n\n        // Checks strategies data is valid\n        bytes4[] memory checkdata = castCheckdataToBytes4(\n            _packedStrategies.checkdata\n        );\n\n        checkStrategyHash(_packedStrategies, checkdata);\n\n        // Checks index in range\n        require(\n            indexStrategyToUpdate < _packedStrategies.addresses.length,\n            \"INDEX_OUT_OF_RANGE\"\n        );\n\n        // Checks call data valid\n        checkValidityOfData(_newStrategyParam);\n\n        // Build new arrays for the Strategy Hash and the Event\n        uint256[] memory strategiesCallLen = new uint256[](\n            _packedStrategies.callLen.length\n        );\n        uint256[] memory calculationsLen = new uint256[](\n            _packedStrategies.calculationsLen.length\n        );\n        uint256[] memory conditionsLen = new uint256[](\n            _packedStrategies.conditionsLen.length\n        );\n        address[] memory contracts = new address[](\n            _packedStrategies.contracts.length -\n                _packedStrategies.callLen[indexStrategyToUpdate] +\n                _newStrategyParam.callLen\n        );\n        checkdata = new bytes4[](\n            _packedStrategies.checkdata.length -\n                _packedStrategies.callLen[indexStrategyToUpdate] +\n                _newStrategyParam.callLen\n        );\n        uint256[] memory offset = new uint256[](\n            _packedStrategies.offset.length -\n                _packedStrategies.callLen[indexStrategyToUpdate] +\n                _newStrategyParam.callLen\n        );\n        uint256[] memory calculations = new uint256[](\n            _packedStrategies.calculations.length -\n                _packedStrategies.calculationsLen[indexStrategyToUpdate] +\n                _newStrategyParam.calculationsLen\n        );\n        uint256[] memory conditions = new uint256[](\n            _packedStrategies.conditions.length -\n                _packedStrategies.conditionsLen[indexStrategyToUpdate] +\n                _newStrategyParam.conditionsLen\n        );\n        uint256 offsetCalldata = indexStrategyToUpdate;\n        if (indexStrategyToUpdate == _packedStrategies.addresses.length - 1) {\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                strategiesCallLen[i] = _packedStrategies.callLen[i];\n            }\n            strategiesCallLen[offsetCalldata] = _newStrategyParam.callLen;\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                calculationsLen[i] = _packedStrategies.calculationsLen[i];\n            }\n            calculationsLen[offsetCalldata] = _newStrategyParam.calculationsLen;\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                conditionsLen[i] = _packedStrategies.conditionsLen[i];\n            }\n            conditionsLen[offsetCalldata] = _newStrategyParam.conditionsLen;\n\n            offsetCalldata = 0;\n            for (uint256 i = 0; i < indexStrategyToUpdate; i++) {\n                offsetCalldata += _packedStrategies.callLen[i];\n            }\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                contracts[i] = _packedStrategies.contracts[i];\n            }\n            for (uint256 i = 0; i < _newStrategyParam.callLen; i++) {\n                contracts[i + offsetCalldata] = _newStrategyParam.contracts[i];\n            }\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                checkdata[i] = bytes4(_packedStrategies.checkdata[i]);\n            }\n            for (uint256 i = 0; i < _newStrategyParam.callLen; i++) {\n                checkdata[i + offsetCalldata] = bytes4(\n                    _newStrategyParam.checkdata[i]\n                );\n            }\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                offset[i] = _packedStrategies.offset[i];\n            }\n            for (uint256 i = 0; i < _newStrategyParam.callLen; i++) {\n                offset[i + offsetCalldata] = _newStrategyParam.offset[i];\n            }\n\n            offsetCalldata = 0;\n            for (uint256 i = 0; i < indexStrategyToUpdate; i++) {\n                offsetCalldata += _packedStrategies.calculationsLen[i];\n            }\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                calculations[i] = _packedStrategies.calculations[i];\n            }\n            for (uint256 i = 0; i < _newStrategyParam.calculationsLen; i++) {\n                calculations[i + offsetCalldata] = _newStrategyParam\n                    .calculations[i];\n            }\n\n            offsetCalldata = 0;\n            for (uint256 i = 0; i < indexStrategyToUpdate; i++) {\n                offsetCalldata += _packedStrategies.conditionsLen[i];\n            }\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                conditions[i] = _packedStrategies.conditions[i];\n            }\n            for (uint256 i = 0; i < _newStrategyParam.conditionsLen; i++) {\n                conditions[i + offsetCalldata] = _newStrategyParam.conditions[\n                    i\n                ];\n            }\n        } else {\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                strategiesCallLen[i] = _packedStrategies.callLen[i];\n            }\n            strategiesCallLen[offsetCalldata] = _newStrategyParam.callLen;\n            for (\n                uint256 i = offsetCalldata + 1;\n                i < _packedStrategies.callLen.length;\n                i++\n            ) {\n                strategiesCallLen[i] = _packedStrategies.callLen[i];\n            }\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                calculationsLen[i] = _packedStrategies.calculationsLen[i];\n            }\n            calculationsLen[offsetCalldata] = _newStrategyParam.calculationsLen;\n            for (\n                uint256 i = offsetCalldata + 1;\n                i < _packedStrategies.calculationsLen.length;\n                i++\n            ) {\n                calculationsLen[i] = _packedStrategies.calculationsLen[i];\n            }\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                conditionsLen[i] = _packedStrategies.conditionsLen[i];\n            }\n            conditionsLen[offsetCalldata] = _newStrategyParam.conditionsLen;\n            for (\n                uint256 i = offsetCalldata + 1;\n                i < _packedStrategies.conditionsLen.length;\n                i++\n            ) {\n                conditionsLen[i] = _packedStrategies.conditionsLen[i];\n            }\n\n            uint256 totalCallLen = 0;\n            offsetCalldata = 0;\n            for (uint256 i = 0; i < _packedStrategies.addresses.length; i++) {\n                if (i == indexStrategyToUpdate) {\n                    offsetCalldata = totalCallLen;\n                }\n                totalCallLen += _packedStrategies.callLen[i];\n            }\n            uint256 offsetCalldataAfter = offsetCalldata +\n                _packedStrategies.callLen[indexStrategyToUpdate];\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                contracts[i] = _packedStrategies.contracts[i];\n            }\n            for (uint256 i = 0; i < _newStrategyParam.callLen; i++) {\n                contracts[i + offsetCalldata] = _newStrategyParam.contracts[i];\n            }\n            for (uint256 i = 0; i < totalCallLen - offsetCalldataAfter; i++) {\n                contracts[\n                    i + offsetCalldata + _newStrategyParam.callLen\n                ] = _packedStrategies.contracts[offsetCalldataAfter + i];\n            }\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                checkdata[i] = bytes4(_packedStrategies.checkdata[i]);\n            }\n            for (uint256 i = 0; i < _newStrategyParam.callLen; i++) {\n                checkdata[i + offsetCalldata] = bytes4(\n                    _newStrategyParam.checkdata[i]\n                );\n            }\n            for (uint256 i = 0; i < totalCallLen - offsetCalldataAfter; i++) {\n                checkdata[\n                    i + offsetCalldata + _newStrategyParam.callLen\n                ] = bytes4(\n                    _packedStrategies.checkdata[offsetCalldataAfter + i]\n                );\n            }\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                offset[i] = _packedStrategies.offset[i];\n            }\n            for (uint256 i = 0; i < _newStrategyParam.callLen; i++) {\n                offset[i + offsetCalldata] = _newStrategyParam.offset[i];\n            }\n            for (uint256 i = 0; i < totalCallLen - offsetCalldataAfter; i++) {\n                offset[\n                    i + offsetCalldata + _newStrategyParam.callLen\n                ] = _packedStrategies.offset[offsetCalldataAfter + i];\n            }\n\n            totalCallLen = 0;\n            offsetCalldata = 0;\n            for (uint256 i = 0; i < _packedStrategies.addresses.length; i++) {\n                if (i == indexStrategyToUpdate) {\n                    offsetCalldata = totalCallLen;\n                }\n                totalCallLen += _packedStrategies.calculationsLen[i];\n            }\n            offsetCalldataAfter =\n                offsetCalldata +\n                _packedStrategies.calculationsLen[indexStrategyToUpdate];\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                calculations[i] = _packedStrategies.calculations[i];\n            }\n            for (uint256 i = 0; i < _newStrategyParam.calculationsLen; i++) {\n                calculations[i + offsetCalldata] = _newStrategyParam\n                    .calculations[i];\n            }\n            for (uint256 i = 0; i < totalCallLen - offsetCalldataAfter; i++) {\n                calculations[\n                    i + offsetCalldata + _newStrategyParam.calculationsLen\n                ] = _packedStrategies.calculations[offsetCalldataAfter + i];\n            }\n\n            totalCallLen = 0;\n            offsetCalldata = 0;\n            for (uint256 i = 0; i < _packedStrategies.addresses.length; i++) {\n                if (i == indexStrategyToUpdate) {\n                    offsetCalldata = totalCallLen;\n                }\n                totalCallLen += _packedStrategies.conditionsLen[i];\n            }\n            offsetCalldataAfter =\n                offsetCalldata +\n                _packedStrategies.conditionsLen[indexStrategyToUpdate];\n            for (uint256 i = 0; i < offsetCalldata; i++) {\n                conditions[i] = _packedStrategies.conditions[i];\n            }\n            for (uint256 i = 0; i < _newStrategyParam.conditionsLen; i++) {\n                conditions[i + offsetCalldata] = _newStrategyParam.conditions[\n                    i\n                ];\n            }\n            for (uint256 i = 0; i < totalCallLen - offsetCalldataAfter; i++) {\n                conditions[\n                    i + offsetCalldata + _newStrategyParam.conditionsLen\n                ] = _packedStrategies.conditions[offsetCalldataAfter + i];\n            }\n        }\n\n        strategiesHash = uint256(\n            keccak256(\n                abi.encodePacked(\n                    _packedStrategies.addresses,\n                    strategiesCallLen,\n                    contracts,\n                    checkdata,\n                    offset,\n                    calculationsLen,\n                    calculations,\n                    conditionsLen,\n                    conditions\n                )\n            )\n        );\n\n        emit StrategyUpdated(\n            _packedStrategies.addresses,\n            strategiesCallLen,\n            contracts,\n            checkdata,\n            offset,\n            calculationsLen,\n            calculations,\n            conditionsLen,\n            conditions\n        );\n    }\n\n    function removeStrategy(\n        PackedStrategies memory _packedStrategies,\n        uint256 indexStrategyToRemove\n    ) external onlyOwner {\n        // Checks at least one strategy is registered\n        require(strategiesHash != 0, \"NO_STRATEGIES\");\n\n        bytes4[] memory checkdata = castCheckdataToBytes4(\n            _packedStrategies.checkdata\n        );\n\n        // Checks strategies data is valid\n        checkStrategyHash(_packedStrategies, checkdata);\n\n        // Checks index in range\n        require(indexStrategyToRemove < _packedStrategies.addresses.length);\n\n        // Build new arrays for the Strategy Hash and the Event\n        uint256[] memory strategiesCallLen = new uint256[](\n            _packedStrategies.callLen.length - 1\n        );\n        uint256[] memory calculationsLen = new uint256[](\n            _packedStrategies.calculationsLen.length - 1\n        );\n        uint256[] memory conditionsLen = new uint256[](\n            _packedStrategies.conditionsLen.length - 1\n        );\n        address[] memory contracts = new address[](\n            _packedStrategies.contracts.length -\n                _packedStrategies.callLen[indexStrategyToRemove]\n        );\n        checkdata = new bytes4[](\n            _packedStrategies.checkdata.length -\n                _packedStrategies.callLen[indexStrategyToRemove]\n        );\n        uint256[] memory offset = new uint256[](\n            _packedStrategies.offset.length -\n                _packedStrategies.callLen[indexStrategyToRemove]\n        );\n        uint256[] memory calculations = new uint256[](\n            _packedStrategies.calculations.length -\n                _packedStrategies.calculationsLen[indexStrategyToRemove]\n        );\n        uint256[] memory conditions = new uint256[](\n            _packedStrategies.conditions.length -\n                _packedStrategies.conditionsLen[indexStrategyToRemove]\n        );\n        uint256 offsetCalldata = indexStrategyToRemove;\n        for (uint256 i = 0; i < offsetCalldata; i++) {\n            strategiesCallLen[i] = _packedStrategies.callLen[i];\n        }\n        for (\n            uint256 i = 0;\n            i < _packedStrategies.addresses.length - (offsetCalldata + 1);\n            i++\n        ) {\n            strategiesCallLen[offsetCalldata + i] = _packedStrategies.callLen[\n                offsetCalldata + 1 + i\n            ];\n        }\n        for (uint256 i = 0; i < offsetCalldata; i++) {\n            calculationsLen[i] = _packedStrategies.calculationsLen[i];\n        }\n        for (\n            uint256 i = 0;\n            i < _packedStrategies.addresses.length - (offsetCalldata + 1);\n            i++\n        ) {\n            calculationsLen[offsetCalldata + i] = _packedStrategies\n                .calculationsLen[offsetCalldata + 1 + i];\n        }\n        for (uint256 i = 0; i < offsetCalldata; i++) {\n            conditionsLen[i] = _packedStrategies.conditionsLen[i];\n        }\n        for (\n            uint256 i = 0;\n            i < _packedStrategies.addresses.length - (offsetCalldata + 1);\n            i++\n        ) {\n            conditionsLen[offsetCalldata + i] = _packedStrategies.conditionsLen[\n                offsetCalldata + 1 + i\n            ];\n        }\n\n        uint256 totalCallLen = 0;\n        offsetCalldata = 0;\n        for (uint256 i = 0; i < _packedStrategies.addresses.length; i++) {\n            if (i == indexStrategyToRemove) {\n                offsetCalldata = totalCallLen;\n            }\n            totalCallLen += _packedStrategies.callLen[i];\n        }\n\n        for (uint256 i = 0; i < offsetCalldata; i++) {\n            contracts[i] = _packedStrategies.contracts[i];\n        }\n        for (\n            uint256 i = 0;\n            i <\n            totalCallLen -\n                (offsetCalldata +\n                    _packedStrategies.callLen[indexStrategyToRemove]);\n            i++\n        ) {\n            contracts[i + offsetCalldata] = _packedStrategies.contracts[\n                offsetCalldata +\n                    _packedStrategies.callLen[indexStrategyToRemove] +\n                    i\n            ];\n        }\n        for (uint256 i = 0; i < offsetCalldata; i++) {\n            checkdata[i] = bytes4(_packedStrategies.checkdata[i]);\n        }\n        for (\n            uint256 i = 0;\n            i <\n            totalCallLen -\n                (offsetCalldata +\n                    _packedStrategies.callLen[indexStrategyToRemove]);\n            i++\n        ) {\n            checkdata[i + offsetCalldata] = bytes4(\n                _packedStrategies.checkdata[\n                    offsetCalldata +\n                        _packedStrategies.callLen[indexStrategyToRemove] +\n                        i\n                ]\n            );\n        }\n        for (uint256 i = 0; i < offsetCalldata; i++) {\n            offset[i] = _packedStrategies.offset[i];\n        }\n        for (\n            uint256 i = 0;\n            i <\n            totalCallLen -\n                (offsetCalldata +\n                    _packedStrategies.callLen[indexStrategyToRemove]);\n            i++\n        ) {\n            offset[i + offsetCalldata] = _packedStrategies.offset[\n                offsetCalldata +\n                    _packedStrategies.callLen[indexStrategyToRemove] +\n                    i\n            ];\n        }\n\n        totalCallLen = 0;\n        offsetCalldata = 0;\n        for (uint256 i = 0; i < _packedStrategies.addresses.length; i++) {\n            if (i == indexStrategyToRemove) {\n                offsetCalldata = totalCallLen;\n            }\n            totalCallLen += _packedStrategies.calculationsLen[i];\n        }\n        for (uint256 i = 0; i < offsetCalldata; i++) {\n            calculations[i] = _packedStrategies.calculations[i];\n        }\n        for (\n            uint256 i = 0;\n            i <\n            totalCallLen -\n                (offsetCalldata +\n                    _packedStrategies.calculationsLen[indexStrategyToRemove]);\n            i++\n        ) {\n            calculations[i + offsetCalldata] = _packedStrategies.calculations[\n                offsetCalldata +\n                    _packedStrategies.calculationsLen[indexStrategyToRemove] +\n                    i\n            ];\n        }\n        totalCallLen = 0;\n        offsetCalldata = 0;\n        for (uint256 i = 0; i < _packedStrategies.addresses.length; i++) {\n            if (i == indexStrategyToRemove) {\n                offsetCalldata = totalCallLen;\n            }\n            totalCallLen += _packedStrategies.conditionsLen[i];\n        }\n        for (uint256 i = 0; i < offsetCalldata; i++) {\n            conditions[i] = _packedStrategies.conditions[i];\n        }\n        for (\n            uint256 i = 0;\n            i <\n            totalCallLen -\n                (offsetCalldata +\n                    _packedStrategies.conditionsLen[indexStrategyToRemove]);\n            i++\n        ) {\n            conditions[i + offsetCalldata] = _packedStrategies.conditions[\n                offsetCalldata +\n                    _packedStrategies.conditionsLen[indexStrategyToRemove] +\n                    i\n            ];\n        }\n\n        strategiesHash = uint256(\n            keccak256(\n                abi.encodePacked(\n                    _packedStrategies.addresses,\n                    strategiesCallLen,\n                    contracts,\n                    checkdata,\n                    offset,\n                    calculationsLen,\n                    calculations,\n                    conditionsLen,\n                    conditions\n                )\n            )\n        );\n        emit StrategyRemoved(\n            _packedStrategies.addresses,\n            strategiesCallLen,\n            contracts,\n            checkdata,\n            offset,\n            calculationsLen,\n            calculations,\n            conditionsLen,\n            conditions\n        );\n    }\n\n    //Can't set only view, .call potentially modify state (should not arrive)\n    function getStrategiesData(\n        address[] calldata contracts,\n        bytes[] calldata checkdata,\n        uint256[] calldata offset\n    ) public returns (uint256[] memory dataStrategies) {\n        uint256[] memory dataStrategies_ = new uint256[](contracts.length);\n        for (uint256 j; j < contracts.length; j++) {\n            (, bytes memory data) = contracts[j].call(checkdata[j]);\n            dataStrategies_[j] = uint256(bytesToBytes32(data, offset[j]));\n        }\n        return (dataStrategies_);\n    }\n\n    //     function updateTargetAllocation(address[] memory strategies) internal {\n    //         uint256[] memory realAllocations = new uint256[](strategies.length);\n    //         uint256 cumulativeAmountRealAllocations = 0;\n    //         uint256 cumulativeAmountTargetAllocations = 0;\n    //         for (uint256 j; j < strategies.length; j++) {\n    //             realAllocations[j] = IStrategy(strategies[j]).totalAssets();\n    //             cumulativeAmountRealAllocations += realAllocations[j];\n    //             cumulativeAmountTargetAllocations += targetAllocation[j];\n    //         }\n    //\n    //         if (cumulativeAmountTargetAllocations == 0) {\n    //             targetAllocation = realAllocations;\n    //         } else {\n    //             if (\n    //                 cumulativeAmountTargetAllocations <=\n    //                 cumulativeAmountRealAllocations\n    //             ) {\n    //                 uint256 diff = cumulativeAmountRealAllocations -\n    //                     cumulativeAmountTargetAllocations;\n    //                 // We need to add this amount respecting the different strategies allocation ratio\n    //                 for (uint256 i = 0; i < strategies.length; i++) {\n    //                     uint256 strategyAllocationRatio = (PRECISION *\n    //                         targetAllocation[i]) /\n    //                         cumulativeAmountTargetAllocations;\n    //                     targetAllocation[i] +=\n    //                         (strategyAllocationRatio * diff) /\n    //                         PRECISION;\n    //                 }\n    //             } else {\n    //                 uint256 diff = cumulativeAmountTargetAllocations -\n    //                     cumulativeAmountRealAllocations;\n    //                 // We need to substract this amount respecting the different strategies allocation ratio\n    //                 for (uint256 i = 0; i < strategies.length; i++) {\n    //                     uint256 strategyAllocationRatio = (PRECISION *\n    //                         targetAllocation[i]) /\n    //                         cumulativeAmountTargetAllocations;\n    //                     targetAllocation[i] -=\n    //                         (strategyAllocationRatio * diff) /\n    //                         PRECISION;\n    //                 }\n    //             }\n    //         }\n    //     }\n    //\n    // UTILS\n    function checkStrategyHash(\n        PackedStrategies memory _packedStrategies,\n        bytes4[] memory checkdata\n    ) internal view {\n        require(\n            strategiesHash ==\n                uint256(\n                    keccak256(\n                        abi.encodePacked(\n                            _packedStrategies.addresses,\n                            _packedStrategies.callLen,\n                            _packedStrategies.contracts,\n                            checkdata,\n                            _packedStrategies.offset,\n                            _packedStrategies.calculationsLen,\n                            _packedStrategies.calculations,\n                            _packedStrategies.conditionsLen,\n                            _packedStrategies.conditions\n                        )\n                    )\n                ),\n            \"DATA\"\n        );\n    }\n\n    function parseProgramOutput(\n        uint256[] calldata programOutput\n    )\n        public\n        pure\n        returns (\n            uint256 _inputHash,\n            uint256[] memory _currentTargetAllocation,\n            uint256[] memory _newTargetAllocation,\n            uint256 _currentSolution,\n            uint256 _newSolution\n        )\n    {\n        _inputHash = programOutput[0] << 128;\n        _inputHash += programOutput[1];\n\n        _currentTargetAllocation = new uint256[](programOutput[2]);\n\n        _newTargetAllocation = new uint256[](programOutput[2]);\n\n        for (uint256 i = 0; i < programOutput[2]; i++) {\n            // NOTE: skip the 2 first value + array len\n            _currentTargetAllocation[i] = programOutput[i + 3];\n            _newTargetAllocation[i] = programOutput[i + 4 + programOutput[2]];\n        }\n        return (\n            _inputHash,\n            _currentTargetAllocation,\n            _newTargetAllocation,\n            programOutput[programOutput.length - 2],\n            programOutput[programOutput.length - 1]\n        );\n    }\n\n    function bytesToBytes32(\n        bytes memory b,\n        uint offset\n    ) private pure returns (bytes32) {\n        bytes32 out;\n        for (uint i = 0; i < 32; i++) {\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\n        }\n        return out;\n    }\n\n    function castCheckdataToBytes4(\n        bytes[] memory oldCheckdata\n    ) internal view returns (bytes4[] memory checkdata) {\n        checkdata = new bytes4[](oldCheckdata.length);\n        for (uint256 i = 0; i < oldCheckdata.length; i++) {\n            checkdata[i] = bytes4(oldCheckdata[i]);\n        }\n    }\n\n    function checkValidityOfData(\n        StrategyParam memory _newStrategyParam\n    ) internal {\n        // check lengths\n        require(\n            _newStrategyParam.callLen == _newStrategyParam.contracts.length &&\n                _newStrategyParam.callLen ==\n                _newStrategyParam.checkdata.length &&\n                _newStrategyParam.callLen == _newStrategyParam.offset.length &&\n                _newStrategyParam.calculationsLen ==\n                _newStrategyParam.calculations.length &&\n                _newStrategyParam.conditionsLen ==\n                _newStrategyParam.conditions.length,\n            \"ARRAY_LEN\"\n        );\n\n        // check success of calls\n        for (uint256 i = 0; i < _newStrategyParam.callLen; i++) {\n            (bool success, ) = _newStrategyParam.contracts[i].call(\n                _newStrategyParam.checkdata[i]\n            );\n            require(success == true, \"CALLDATA\");\n            // Should we check for offset?\n        }\n    }\n\n    function appendUint256ToArray(\n        uint256[] memory array,\n        uint256 newItem\n    ) internal pure returns (uint256[] memory newArray) {\n        newArray = new uint256[](array.length + 1);\n        for (uint256 i = 0; i < array.length; i++) {\n            newArray[i] = array[i];\n        }\n        newArray[array.length] = newItem;\n    }\n\n    function concatenateUint256ArrayToUint256Array(\n        uint256[] memory arrayA,\n        uint256[] memory arrayB\n    ) internal pure returns (uint256[] memory newArray) {\n        newArray = new uint256[](arrayA.length + arrayB.length);\n        for (uint256 i = 0; i < arrayA.length; i++) {\n            newArray[i] = arrayA[i];\n        }\n        uint256 lenA = arrayA.length;\n        for (uint256 i = 0; i < arrayB.length; i++) {\n            newArray[i + lenA] = arrayB[i];\n        }\n    }\n}\n","imports":[".cache/OpenZeppelin/v4.8.0/access/Ownable.sol",".cache/OpenZeppelin/v4.8.0/token/ERC20/IERC20.sol",".cache/OpenZeppelin/v4.8.0/token/ERC20/utils/SafeERC20.sol"],"references":[],"urls":[]},"mocks/MockStrategy1.sol":{"checksum":{"algorithm":"md5","hash":"0x6a9608f610d677db36c489d7423fc243"},"content":"//SPDX-License-Identifier: UNLICENSED\n\ncontract MockStrategy {\n    uint256 public apiVersion = 2;\n    uint256 public totalAssets = 50 * 10 ** 18;\n\n    function updateTotalAssets() public {\n        totalAssets = 500 * 10 ** 18;\n    }\n}\n\ncontract MockStrategy2 {\n    uint256 public apiVersion = 2;\n    uint256 public totalAssets = 10 * 10 ** 18;\n\n    function updateTotalAssets() public {\n        totalAssets = 500 * 10 ** 18;\n    }\n}\n","imports":[],"references":[],"urls":[]},"mocks/MockStrategyData1.sol":{"checksum":{"algorithm":"md5","hash":"0x5fa398b50c5d8d2061371e2b688b80cf"},"content":"//SPDX-License-Identifier: UNLICENSED\n\ncontract MockStrategyData1 {\n    uint256 public first_data = 11;\n    uint256 public second_data = 111;\n}\n","imports":[],"references":[],"urls":[]},"mocks/MockStrategyData2.sol":{"checksum":{"algorithm":"md5","hash":"0xbb150adb0b0f05603df7d9e27c4bb2fc"},"content":"//SPDX-License-Identifier: UNLICENSED\n\ncontract MockStrategyData2 {\n    uint256 public first_data = 22;\n    uint256 public second_data = 222;\n}\n","imports":[],"references":[],"urls":[]}}}